;;; -*- mode: Lisp; Syntax: Common-Lisp; -*-
;;;
;;; Copyright (c) 2009 by the authors.
;;;
;;; See LICENCE for details.

(in-package :projectured)

;;;;;;
;;; Projection

(def projection book/book->tree/node ()
  ())

(def projection book/chapter->tree/node ()
  ())

(def projection book/paragraph->tree/leaf ()
  ())

(def projection book/picture->tree/leaf ()
  ())

;;;;;;
;;; Construction

(def (function e) make-projection/book/book->tree/node ()
  (make-projection 'book/book->tree/node))

(def (function e) make-projection/book/chapter->tree/node ()
  (make-projection 'book/chapter->tree/node))

(def (function e) make-projection/book/paragraph->tree/leaf ()
  (make-projection 'book/paragraph->tree/leaf))

(def (function e) make-projection/book/picture->tree/leaf ()
  (make-projection 'book/picture->tree/leaf))

;;;;;;
;;; IO map

(def iomap iomap/book/book->tree/node ()
  ((element-iomaps :type sequence)))

(def iomap iomap/book/chapter->tree/node ()
  ((element-iomaps :type sequence)
   (numbering :type string)))

;;;;;;
;;; Printer

(def printer book/book->tree/node (projection recursion input input-reference)
  (bind ((element-iomaps (as (iter (for index :from 0)
                                   (for element :in-sequence (elements-of input))
                                   (for element-iomap = (recurse-printer recursion element
                                                                         `((elt (the sequence document) ,index)
                                                                           (the sequence (elements-of (the book/book document)))
                                                                           ,@(typed-reference (form-type input) input-reference))))
                                   ;; KLUDGE:
                                   (setf (indentation-of (output-of element-iomap)) 0)
                                   (collect element-iomap))))
         (authors (authors-of input))
         (title-selection (as (pattern-case (reverse (selection-of input))
                                (((the string (title-of (the book/book document)))
                                  (the string (subseq (the string document) ?character-index ?character-index)))
                                 `((the text/text (text/subseq (the text/text document) ,?character-index ,?character-index))
                                   (the text/text (content-of (the tree/leaf document)))
                                   (the tree/leaf (elt (the sequence document) 0))
                                   (the sequence (children-of (the tree/node document)))))
                                (((the string (title-of (the book/book document)))
                                  (the string document))
                                 '((the tree/leaf document)
                                   (the tree/leaf (elt (the sequence document) 0))
                                   (the sequence (children-of (the tree/node document)))))
                                (((the tree/node (printer-output (the book/book document) ?projection ?recursion)) . ?rest)
                                 (when (and (eq projection ?projection) (eq recursion ?recursion))
                                   (reverse ?rest))))))
         (author-selection (as (pattern-case (reverse (selection-of input))
                                 (((the sequence (authors-of (the book/book document)))
                                   (the string (elt (the sequence document) ?author-index))
                                   (the string (subseq (the string document) ?character-index ?character-index)))
                                  `((the text/text (text/subseq (the text/text document) ,?character-index ,?character-index))
                                    (the text/text (content-of (the tree/leaf document)))
                                    (the tree/leaf (elt (the sequence document) ,?author-index))
                                    (the sequence (children-of (the tree/node document)))
                                    (the tree/node (elt (the sequence document) 1))
                                    (the sequence (children-of (the tree/node document)))))
                                 (((the tree/node (printer-output (the book/book document) ?projection ?recursion)) . ?rest)
                                  (when (and (eq projection ?projection) (eq recursion ?recursion))
                                    (reverse ?rest))))))
         (output-selection (as (or (va title-selection) (va author-selection)
                                   (pattern-case (reverse (selection-of input))
                                     (((the book/book document))
                                      '((the tree/node document)))
                                     (((the tree/node (printer-output (the book/book document) ?projection ?recursion)) . ?rest)
                                      (when (and (eq projection ?projection) (eq recursion ?recursion))
                                        (reverse ?rest)))
                                     (((the sequence (elements-of (the book/book document))) . ?rest)
                                      (pattern-case (reverse (selection-of (elements-of input)))
                                        (((the ?element-type (elt (the sequence document) ?element-index)) . ?rest)
                                         (bind ((element-iomap (elt (va element-iomaps) ?element-index))
                                                (element-output (output-of element-iomap)))
                                           (append (selection-of element-output)
                                                   `((the ,(form-type element-output) (elt (the sequence document) ,(+ ?element-index (if authors 2 1))))
                                                     (the sequence (children-of (the tree/node document)))))))))))))
         (output (make-tree/node (as (append (list (bind ((title (title-of input)))
                                                     (tree/leaf (:selection (as (butlast (va title-selection) 2)))
                                                       (text/text (:selection (as (butlast (va title-selection) 3)))
                                                         (if (string= title "")
                                                             (text/string "enter book title" :font *font/liberation/serif/bold/36* :font-color (color/lighten *color/solarized/red* 0.75))
                                                             (text/string title :font *font/liberation/serif/bold/36* :font-color *color/solarized/red*))))))
                                             (when authors
                                               (list (make-tree/node (as (iter (for index :from 0)
                                                                               (for author :in-sequence authors)
                                                                               (for x = (tree/leaf (:selection (as (butlast (va author-selection) 4)))
                                                                                          (text/text (:selection (as (butlast (va author-selection) 5)))
                                                                                            (text/string author :font *font/liberation/serif/italic/14* :font-color *color/solarized/content/darker*))))
                                                                               (collect x)))
                                                                     :opening-delimiter (text/text () (text/string "Written by " :font *font/liberation/serif/italic/14* :font-color *color/solarized/content/darker*))
                                                                     :separator (text/text () (text/string ", " :font *font/liberation/serif/italic/14* :font-color *color/solarized/content/darker*))
                                                                     :indentation 0
                                                                     :selection (as (butlast (va author-selection) 2)))))
                                             (mapcar 'output-of (va element-iomaps))))
                                 :selection output-selection)))
    (make-iomap 'iomap/book/book->tree/node
                :projection projection :recursion recursion
                :input input :output output
                :element-iomaps element-iomaps)))

(def printer book/chapter->tree/node (projection recursion input input-reference)
  (bind ((element-iomaps (when (expanded-p input)
                           (iter (for index :from 0)
                                 (for element :in-sequence (elements-of input))
                                 (for element-iomap = (recurse-printer recursion element
                                                                       `((elt (the sequence document) ,index)
                                                                         (the sequence (elements-of (the book/chapter document)))
                                                                         ,@(typed-reference (form-type input) input-reference))))
                                 ;; KLUDGE:
                                 (setf (indentation-of (output-of element-iomap)) 0)
                                 (collect element-iomap))))
         (numbering (pattern-case input-reference
                      (((elt (the sequence document) ?chapter-element-index)
                        (the sequence (elements-of (the book/chapter document)))
                        (the book/chapter (elt (the sequence document) ?book-element-index))
                        (the sequence (elements-of (the book/book document)))
                        . ?rest)
                       (string+ (write-to-string (1+ ?book-element-index)) "." (write-to-string (1+ ?chapter-element-index))))
                      (((elt (the sequence document) ?index)
                        (the sequence (elements-of (the book/book document)))
                        . ?rest)
                       (write-to-string (1+ ?index)))
                      ;; KLUDGE: these handle the case when focusing
                      (((elt (the sequence document) ?chapter-element-index-1)
                        (the sequence (elements-of (the book/chapter document)))
                        (the book/chapter (elt (the sequence document) ?chapter-element-index-2))
                        (the sequence (elements-of (the book/chapter document)))
                        . ?rest)
                       (string+ "1." (write-to-string (1+ ?chapter-element-index-2)) "." (write-to-string (1+ ?chapter-element-index-1))))
                      (((elt (the sequence document) ?index)
                        (the sequence (elements-of (the book/chapter document)))
                        . ?rest)
                       (string+ "1." (write-to-string (1+ ?index))))
                      (?a "1")))
         (output-selection (as (pattern-case (reverse (selection-of input))
                                 (((the book/chapter document))
                                  '((the tree/node document)))
                                 (((the string (title-of (the book/chapter document)))
                                   (the string document))
                                  '((the tree/leaf document)
                                    (the tree/leaf (elt (the sequence document) 0))
                                    (the sequence (children-of (the tree/node document)))))
                                 (((the string (title-of (the book/chapter document)))
                                   (the string (subseq (the string document) ?character-index ?character-index)))
                                  (bind ((character-index (+ ?character-index (length numbering) 1)))
                                    `((the text/text (text/subseq (the text/text document) ,character-index ,character-index))
                                      (the text/text (content-of (the tree/leaf document)))
                                      (the tree/leaf (elt (the sequence document) 0))
                                      (the sequence (children-of (the tree/node document))))))
                                 (((the sequence (elements-of (the book/chapter document)))
                                   (the ?element-type (elt (the sequence document) ?element-index))
                                   . ?rest)
                                  (bind ((element-iomap (elt element-iomaps ?element-index))
                                         (element-output (output-of element-iomap)))
                                    (append (selection-of element-output)
                                            `((the ,(form-type element-output) (elt (the sequence document) ,(+ ?element-index 1)))
                                              (the sequence (children-of (the tree/node document)))))))
                                 (((the tree/node (printer-output (the book/chapter document) ?projection ?recursion)) . ?rest)
                                  (when (and (eq projection ?projection) (eq recursion ?recursion))
                                    (reverse ?rest))))))
         (title-font (pattern-case input-reference
                       (((elt (the sequence document) ?index)
                         (the sequence (elements-of (the book/chapter document)))
                         . ?rest)
                        *font/liberation/serif/regular/24*)
                       (?
                        *font/liberation/serif/bold/30*)))
         (output (make-tree/node (as (list* (bind ((title (title-of input)))
                                              (tree/leaf (:selection (as (butlast (va output-selection) 2)))
                                                (text/text (:selection (as (butlast (va output-selection) 3)))
                                                  (if (string= title "")
                                                      (text/string (string+ numbering " " "enter chapter title") :font title-font :font-color (color/lighten *color/solarized/blue* 0.75))
                                                      (text/string (string+ numbering " " (title-of input)) :font title-font :font-color *color/solarized/blue*)))))
                                            (mapcar 'output-of element-iomaps)))
                                 :selection output-selection
                                 :expanded (expanded-p input))))
    (make-iomap 'iomap/book/chapter->tree/node
                :projection projection :recursion recursion
                :input input :output output
                :element-iomaps element-iomaps
                :numbering numbering)))

(def printer book/paragraph->tree/leaf (projection recursion input input-reference)
  (bind ((content-iomap (recurse-printer recursion (content-of input) `((content-of (the book/paragraph document))
                                                                        ,@(typed-reference (form-type input) input-reference))))
         (content-output (output-of content-iomap))
         (output-selection (as (pattern-case (reverse (selection-of input))
                                 (((the text/text (content-of (the book/paragraph document)))
                                   (the text/text (text/subseq (the text/text document) ?start-character-index ?end-character-index)))
                                  `((the text/text (text/subseq (the text/text document) ,?start-character-index ,?end-character-index))
                                    (the text/text (content-of (the tree/leaf document)))))
                                 (((the tree/leaf (printer-output (the book/paragraph document) ?projection ?recursion)) . ?rest)
                                  (when (and (eq projection ?projection) (eq recursion ?recursion))
                                    (reverse ?rest))))))
         (output (tree/leaf (:selection output-selection)
                   (if (zerop (text/length content-output))
                       (text/text (:selection (as (butlast (va output-selection))))
                         (text/string "enter paragraph text" :font *font/ubuntu/regular/18* :font-color (color/lighten *color/solarized/content/darker* 0.75)))
                       content-output))))
    (make-iomap/object projection recursion input input-reference output)))

(def printer book/picture->tree/leaf (projection recursion input input-reference)
  (bind ((content (content-of input))
         (filename (filename-of content))
         (absolute-filename (if (starts-with #\/ (namestring filename))
                                filename
                                (merge-pathnames filename (hu.dwim.asdf:system-pathname :projectured))))
         (filename-empty? (zerop (length (namestring filename))))
         (file-exists? (and (not filename-empty?)
                            (not (null (pathname-name absolute-filename)))
                            (not (null (pathname-type absolute-filename)))
                            (probe-file absolute-filename)))
         (filename-string (if filename-empty?
                              "enter picture path"
                              (namestring filename)))
         (filename-color (if filename-empty?
                             (color/lighten *color/solarized/gray* 0.75)
                             *color/solarized/gray*))
         (output-selection (as (unless file-exists?
                                 (pattern-case (reverse (selection-of input))
                                   (((the image/image (content-of (the book/picture document)))
                                     (the string (filename-of (the image/image document)))
                                     (the string (subseq (the string document) ?start-character-index ?end-character-index)))
                                    `((the text/text (text/subseq (the text/text document) ,?start-character-index ,?end-character-index))
                                      (the text/text (content-of (the tree/leaf document)))))
                                   (((the tree/leaf (printer-output (the book/picture document) ?projection ?recursion)) . ?rest)
                                    (when (and (eq projection ?projection) (eq recursion ?recursion))
                                      (reverse ?rest)))))))
         (output (tree/leaf (:selection output-selection)
                   (text/text (:selection (as (butlast (va output-selection))))
                     (if file-exists?
                         (content-of input)
                         (text/string filename-string :font *font/liberation/serif/regular/24* :font-color filename-color))))))
    (make-iomap/object projection recursion input input-reference output)))

;;;;;;
;;; Reader

;; TODO: factor out common parts
(def reader book/book->tree/node (projection recursion input printer-iomap)
  (bind ((printer-input (input-of printer-iomap)))
    (merge-commands (gesture-case (gesture-of input)
                      ((gesture/keyboard/key-press :sdl-key-delete)
                       :domain "Book" :description "Deletes the element from the book"
                       :operation (pattern-case (selection-of printer-input)
                                    (((the ?type document)
                                      (the ?type (elt (the sequence document) ?index))
                                      . ?rest)
                                     (make-operation/sequence/replace-element-range printer-input `((the sequence (subseq (the sequence document) ,?index ,(1+ ?index))) ,@?rest) nil)))))
                    (labels ((recurse (operation)
                               (typecase operation
                                 (operation/quit operation)
                                 (operation/functional operation)
                                 (operation/replace-selection
                                  (make-operation/replace-selection printer-input (append (selection-of operation) (last (selection-of printer-input) 2))))
                                 (operation/sequence/replace-element-range
                                  (make-operation/sequence/replace-element-range printer-input (append (target-of operation) (last (selection-of printer-input) 2)) (replacement-of operation)))
                                 (operation/number/replace-range
                                  (make-operation/number/replace-range printer-input (append (target-of operation) (last (selection-of printer-input) 2)) (replacement-of operation)))
                                 (operation/replace-target
                                  (make-operation/replace-target printer-input (append (target-of operation) (last (selection-of printer-input) 2)) (replacement-of operation)))
                                 (operation/compound
                                  (bind ((operations (mapcar #'recurse (elements-of operation))))
                                    (unless (some 'null operations)
                                      (make-operation/compound operations)))))))
                      (pattern-case (reverse (selection-of printer-input))
                        (((the sequence (elements-of (the book/book document)))
                          (the ?element-type (elt (the sequence document) ?element-index))
                          . ?rest)
                         (bind ((content-command (recurse-reader recursion (make-command (gesture-of input) nil :domain (domain-of input) :description (description-of input)) (elt (element-iomaps-of printer-iomap) ?element-index)))
                                (content-operation (recurse (operation-of content-command))))
                           (when content-operation
                             (make-command (gesture-of input)
                                           content-operation
                                           :domain (domain-of content-command)
                                           :description (description-of content-command)))))))
                    (gesture-case (gesture-of input)
                      ((gesture/keyboard/key-press :sdl-key-insert)
                       :domain "Book" :description "Starts an object insertion into the elements of the book"
                       :operation (bind ((elements-length (length (elements-of printer-input))))
                                    (make-operation/compound (list (make-operation/sequence/replace-element-range printer-input `((the sequence (subseq (the sequence document) ,elements-length ,elements-length))
                                                                                                                                  (the sequence (elements-of (the book/book document))))
                                                                                                                  (make-sequence/sequence (vector (as (document/insertion)))))
                                                                   (make-operation/replace-selection printer-input `((the string (subseq (the string document) 0 0))
                                                                                                                     (the string (value-of (the document/insertion document)))
                                                                                                                     (the document/insertion (elt (the sequence document) ,elements-length))
                                                                                                                     (the sequence (elements-of (the book/book document)))))))))
                      ;; TODO: gesture
                      ((gesture/keyboard/key-press :sdl-key-a :control)
                       :domain "Book" :description "Inserts a new chapter into the elements of the book"
                       :operation (bind ((elements-length (length (elements-of printer-input))))
                                    (make-operation/compound (list (make-operation/sequence/replace-element-range printer-input `((the sequence (subseq (the sequence document) ,elements-length ,elements-length))
                                                                                                                                  (the sequence (elements-of (the book/book document))))
                                                                                                                  (make-sequence/sequence (vector (as (book/chapter ())))))
                                                                   (make-operation/replace-selection printer-input `((the string (subseq (the string document) 0 0))
                                                                                                                     (the string (title-of (the book/chapter document)))
                                                                                                                     (the book/chapter (elt (the sequence document) ,elements-length))
                                                                                                                     (the sequence (elements-of (the book/book document)))))))))
                      ((gesture/keyboard/key-press :sdl-key-p :control)
                       :domain "Book" :description "Switches to generic tree notation"
                       :operation (make-operation/functional (lambda () (setf (projection-of printer-input) (recursive (make-projection/t->tree)))))))
                    (awhen (labels ((recurse (operation)
                                      (typecase operation
                                        (operation/quit operation)
                                        (operation/functional operation)
                                        (operation/replace-selection
                                         (awhen (pattern-case (reverse (selection-of operation))
                                                  (((the tree/node document))
                                                   '((the book/book document)))
                                                  (((the sequence (children-of (the tree/node document)))
                                                    (the tree/leaf (elt (the sequence document) 0))
                                                    (the tree/leaf document))
                                                   '((the string document)
                                                     (the string (title-of (the book/book document)))))
                                                  (((the sequence (children-of (the tree/node document)))
                                                    (the tree/leaf (elt (the sequence document) 0))
                                                    (the text/text (content-of (the tree/leaf document)))
                                                    (the text/text (text/subseq (the text/text document) ?character-index ?character-index)))
                                                   (if (string= (title-of printer-input) "")
                                                       (append (selection-of operation) `((the tree/node (printer-output (the book/book document) ,projection ,recursion))))
                                                       `((the string (subseq (the string document) ,?character-index ,?character-index))
                                                         (the string (title-of (the book/book document))))))
                                                  (((the sequence (children-of (the tree/node document)))
                                                    (the ?child-type (elt (the sequence document) ?child-index))
                                                    . ?rest)
                                                   (bind ((authors (authors-of printer-input)))
                                                     (cond ((and authors (= ?child-index 1))
                                                            (pattern-case (reverse (selection-of operation))
                                                              (((the sequence (children-of (the tree/node document)))
                                                                (the tree/node (elt (the sequence document) 1))
                                                                (the sequence (children-of (the tree/node document)))
                                                                (the tree/leaf (elt (the sequence document) ?child-index))
                                                                (the text/text (content-of (the tree/leaf document)))
                                                                (the text/text (text/subseq (the text/text document) ?character-index ?character-index)))
                                                               `((the string (subseq (the string document) ,?character-index ,?character-index))
                                                                 (the string (elt (the sequence document) ,?child-index))
                                                                 (the sequence (authors-of (the book/book document)))))
                                                              (?a
                                                               (append (selection-of operation) `((the tree/node (printer-output (the book/book document) ,projection ,recursion)))))))
                                                           (t (bind ((element-index (- ?child-index (if (authors-of printer-input) 2 1)))
                                                                     (element (elt (elements-of printer-input) element-index))
                                                                     (input-element-operation (make-operation/replace-selection element (reverse ?rest)))
                                                                     (output-element-operation (operation-of (recurse-reader recursion (make-command (gesture-of input) input-element-operation :domain (domain-of input) :description (description-of input)) (elt (element-iomaps-of printer-iomap) element-index)))))
                                                                (when (typep output-element-operation 'operation/replace-selection)
                                                                  (append (selection-of output-element-operation)
                                                                          `((the ,(form-type element) (elt (the sequence document) ,element-index))
                                                                            (the sequence (elements-of (the book/book document)))))))))))
                                                  (?a
                                                   (append (selection-of operation) `((the tree/node (printer-output (the book/book document) ,projection ,recursion))))))
                                           (make-operation/replace-selection printer-input it)))
                                        (operation/sequence/replace-element-range
                                         (awhen (pattern-case (reverse (target-of operation))
                                                  (((the sequence (children-of (the tree/node document)))
                                                    (the tree/leaf (elt (the sequence document) 0))
                                                    (the text/text (content-of (the tree/leaf document)))
                                                    (the text/text (text/subseq (the text/text document) ?start-character-index ?end-character-index)))
                                                   (if (string= (title-of printer-input) "")
                                                       (when (= ?start-character-index ?end-character-index)
                                                         `((the string (subseq (the string document) 0 0))
                                                           (the string (title-of (the book/book document)))))
                                                       `((the string (subseq (the string document) ,?start-character-index ,?end-character-index))
                                                         (the string (title-of (the book/book document))))))
                                                  (((the sequence (children-of (the tree/node document)))
                                                    (the ?child-type (elt (the sequence document) ?child-index))
                                                    . ?rest)
                                                   (bind ((authors (authors-of printer-input)))
                                                     (cond ((and authors (= ?child-index 1))
                                                            (pattern-case (reverse (target-of operation))
                                                              (((the sequence (children-of (the tree/node document)))
                                                                (the tree/node (elt (the sequence document) 1))
                                                                (the sequence (children-of (the tree/node document)))
                                                                (the tree/leaf (elt (the sequence document) ?child-index))
                                                                (the text/text (content-of (the tree/leaf document)))
                                                                (the text/text (text/subseq (the text/text document) ?character-index ?character-index)))
                                                               `((the string (subseq (the string document) ,?character-index ,?character-index))
                                                                 (the string (elt (the sequence document) ,?child-index))
                                                                 (the sequence (authors-of (the book/book document)))))))
                                                           (t (bind ((element-index (- ?child-index (if (authors-of printer-input) 2 1)))
                                                                     (element (elt (elements-of printer-input) element-index))
                                                                     (input-element-operation (make-operation/sequence/replace-element-range element (reverse ?rest) (replacement-of operation)))
                                                                     (output-element-operation (operation-of (recurse-reader recursion (make-command (gesture-of input) input-element-operation :domain (domain-of input) :description (description-of input)) (elt (element-iomaps-of printer-iomap) element-index)))))
                                                                (when (typep output-element-operation 'operation/sequence/replace-element-range)
                                                                  (append (target-of output-element-operation)
                                                                          `((the ,(form-type element) (elt (the sequence document) ,element-index))
                                                                            (the sequence (elements-of (the book/book document))))))))))))
                                           (make-operation/sequence/replace-element-range printer-input it (replacement-of operation))))
                                        (operation/show-context-sensitive-help
                                         (make-instance 'operation/show-context-sensitive-help
                                                        :commands (iter (for command :in (commands-of operation))
                                                                        (awhen (recurse (operation-of command))
                                                                          (collect (make-instance 'command
                                                                                                  :gesture (gesture-of command)
                                                                                                  :domain (domain-of command)
                                                                                                  :description (description-of command)
                                                                                                  :operation it))))))
                                        (operation/compound
                                         (bind ((operations (mapcar #'recurse (elements-of operation))))
                                           (unless (some 'null operations)
                                             (make-operation/compound operations)))))))
                             (recurse (operation-of input)))
                      (make-command (gesture-of input) it
                                    :domain (domain-of input)
                                    :description (description-of input)))
                    (gesture-case (gesture-of input)
                      ((gesture/keyboard/key-press :sdl-key-delete)
                       :domain "Book" :description "Deletes the book"
                       :operation (pattern-case (selection-of printer-input)
                                    (((the book/book document) . ?rest)
                                     (make-operation/replace-target printer-iomap nil (document/nothing)))
                                    (((the ?type (elt (the sequence document)) ?index) . ?rest)
                                     (make-operation/sequence/replace-element-range printer-input `((the sequence (subseq (the sequence document) ,?index ,?index)) ,@?rest) nil)))))
                    (make-command/nothing (gesture-of input)))))

(def reader book/chapter->tree/node (projection recursion input printer-iomap)
  (bind ((printer-input (input-of printer-iomap)))
    (merge-commands (gesture-case (gesture-of input)
                      ((gesture/keyboard/key-press :sdl-key-delete)
                       :domain "Book" :description "Deletes the element from the chapter"
                       :operation (pattern-case (selection-of printer-input)
                                    (((the ?type document)
                                      (the ?type (elt (the sequence document) ?index))
                                      . ?rest)
                                     (make-operation/sequence/replace-element-range printer-input `((the sequence (subseq (the sequence document) ,?index ,(1+ ?index))) ,@?rest) nil)))))
                    (labels ((recurse (operation)
                               (typecase operation
                                 (operation/quit operation)
                                 (operation/functional operation)
                                 (operation/replace-selection
                                  (make-operation/replace-selection printer-input (append (selection-of operation) (last (selection-of printer-input) 2))))
                                 (operation/sequence/replace-element-range
                                  (make-operation/sequence/replace-element-range printer-input (append (target-of operation) (last (selection-of printer-input) 2)) (replacement-of operation)))
                                 (operation/number/replace-range
                                  (make-operation/number/replace-range printer-input (append (target-of operation) (last (selection-of printer-input) 2)) (replacement-of operation)))
                                 (operation/replace-target
                                  (make-operation/replace-target printer-input (append (target-of operation) (last (selection-of printer-input) 2)) (replacement-of operation)))
                                 (operation/compound
                                  (bind ((operations (mapcar #'recurse (elements-of operation))))
                                    (unless (some 'null operations)
                                      (make-operation/compound operations)))))))
                      (pattern-case (reverse (selection-of printer-input))
                        (((the sequence (elements-of (the book/chapter document)))
                          (the ?element-type (elt (the sequence document) ?element-index))
                          . ?rest)
                         (bind ((content-command (recurse-reader recursion (make-command (gesture-of input) nil :domain (domain-of input) :description (description-of input)) (elt (element-iomaps-of printer-iomap) ?element-index)))
                                (content-operation (recurse (operation-of content-command))))
                           (when content-operation
                             (make-command (gesture-of input)
                                           content-operation
                                           :domain (domain-of content-command)
                                           :description (description-of content-command)))))))
                    (gesture-case (gesture-of input)
                      ((gesture/keyboard/key-press :sdl-key-insert)
                       :domain "Book" :description "Starts an object insertion into the elements of the chapter"
                       :operation (bind ((elements-length (length (elements-of printer-input))))
                                    (make-operation/compound (list (make-operation/sequence/replace-element-range printer-input `((the sequence (subseq (the sequence document) ,elements-length ,elements-length))
                                                                                                                                  (the sequence (elements-of (the book/chapter document))))
                                                                                                                  (make-sequence/sequence (vector (as (document/insertion)))))
                                                                   (make-operation/replace-selection printer-input `((the string (subseq (the string document) 0 0))
                                                                                                                     (the string (value-of (the document/insertion document)))
                                                                                                                     (the document/insertion (elt (the sequence document) ,elements-length))
                                                                                                                     (the sequence (elements-of (the book/chapter document)))))))))
                      ((gesture/keyboard/key-press :sdl-key-p :control)
                       :domain "Book" :description "Switches to generic tree notation"
                       :operation (make-operation/functional (lambda () (setf (projection-of printer-input) (recursive (make-projection/t->tree))))))
                      ((gesture/keyboard/key-press :sdl-key-a :control)
                       :domain "Book" :description "Inserts a new chapter into the elements of the book"
                       :operation (bind ((elements-length (length (elements-of printer-input))))
                                    (make-operation/compound (list (make-operation/sequence/replace-element-range printer-input `((the sequence (subseq (the sequence document) ,elements-length ,elements-length))
                                                                                                                                  (the sequence (elements-of (the book/chapter document))))
                                                                                                                  (make-sequence/sequence (vector (as (book/chapter ())))))
                                                                   (make-operation/replace-selection printer-input `((the string (subseq (the string document) 0 0))
                                                                                                                     (the string (title-of (the book/chapter document)))
                                                                                                                     (the book/chapter (elt (the sequence document) ,elements-length))
                                                                                                                     (the sequence (elements-of (the book/chapter document)))))))))
                      ((gesture/keyboard/key-press :sdl-key-r :control)
                       :domain "Book" :description "Inserts a new paragraph into the elements of the book"
                       :operation (bind ((elements-length (length (elements-of printer-input))))
                                    (make-operation/compound (list (make-operation/sequence/replace-element-range printer-input `((the sequence (subseq (the sequence document) ,elements-length ,elements-length))
                                                                                                                                  (the sequence (elements-of (the book/chapter document))))
                                                                                                                  (make-sequence/sequence (vector (as (book/paragraph ()
                                                                                                                                                        (text/text () (text/string "" :font *font/ubuntu/regular/18* :font-color *color/solarized/content/darker*)))))))
                                                                   (make-operation/replace-selection printer-input `((the text/text (text/subseq (the text/text document) 0 0))
                                                                                                                     (the text/text (content-of (the book/paragraph document)))
                                                                                                                     (the book/paragraph (elt (the sequence document) ,elements-length))
                                                                                                                     (the sequence (elements-of (the book/chapter document))))))))))
                    (awhen (labels ((recurse (operation)
                                      (typecase operation
                                        (operation/quit operation)
                                        (operation/functional operation)
                                        (operation/replace-selection
                                         (make-operation/replace-selection printer-input
                                                                           (pattern-case (reverse (selection-of operation))
                                                                             (((the tree/node document))
                                                                              '((the book/chapter document)))
                                                                             (((the sequence (children-of (the tree/node document)))
                                                                               (the tree/leaf (elt (the sequence document) 0))
                                                                               (the tree/leaf document))
                                                                              '((the string document)
                                                                                (the string (title-of (the book/chapter document)))))
                                                                             (((the sequence (children-of (the tree/node document)))
                                                                               (the tree/leaf (elt (the sequence document) 0))
                                                                               (the text/text (content-of (the tree/leaf document)))
                                                                               (the text/text (text/subseq (the text/text document) ?character-index ?character-index)))
                                                                              (bind ((character-index (- ?character-index (length (numbering-of printer-iomap)) 1)))
                                                                                (if (or (< character-index 0)
                                                                                        (string= (title-of printer-input) ""))
                                                                                    (append (selection-of operation) `((the tree/node (printer-output (the book/chapter document) ,projection ,recursion))))
                                                                                    `((the string (subseq (the string document) ,character-index ,character-index))
                                                                                      (the string (title-of (the book/chapter document)))))))
                                                                             (((the sequence (children-of (the tree/node document)))
                                                                               (the ?child-type (elt (the sequence document) ?child-index))
                                                                               . ?rest)
                                                                              (bind ((element-index (- ?child-index 1))
                                                                                     (element (elt (elements-of printer-input) element-index))
                                                                                     (input-element-operation (make-operation/replace-selection element (reverse ?rest)))
                                                                                     (output-element-operation (operation-of (recurse-reader recursion (make-command (gesture-of input) input-element-operation :domain (domain-of input) :description (description-of input)) (elt (element-iomaps-of printer-iomap) element-index)))))
                                                                                (when (typep output-element-operation 'operation/replace-selection)
                                                                                  (append (selection-of output-element-operation)
                                                                                          `((the ,(form-type element) (elt (the sequence document) ,element-index))
                                                                                            (the sequence (elements-of (the book/chapter document)))))))))))
                                        (operation/sequence/replace-element-range
                                         (awhen (pattern-case (reverse (target-of operation))
                                                  (((the sequence (children-of (the tree/node document)))
                                                    (the tree/leaf (elt (the sequence document) 0))
                                                    (the text/text (content-of (the tree/leaf document)))
                                                    (the text/text (text/subseq (the text/text document) ?start-character-index ?end-character-index)))
                                                   (if (string= (title-of printer-input) "")
                                                       (when (= ?start-character-index ?end-character-index)
                                                         `((the string (subseq (the string document) 0 0))
                                                           (the string (title-of (the book/chapter document)))))
                                                       (bind ((start-character-index (- ?start-character-index (length (numbering-of printer-iomap)) 1))
                                                              (end-character-index (- ?end-character-index (length (numbering-of printer-iomap)) 1)))
                                                         (when (and (>= start-character-index 0) (>= end-character-index 0))
                                                           `((the string (subseq (the string document) ,start-character-index ,end-character-index))
                                                             (the string (title-of (the book/chapter document))))))))
                                                  (((the sequence (children-of (the tree/node document)))
                                                    (the ?child-type (elt (the sequence document) ?child-index))
                                                    . ?rest)
                                                   (bind ((element-index (- ?child-index 1))
                                                          (element (elt (elements-of printer-input) element-index))
                                                          (input-element-operation (make-operation/sequence/replace-element-range element (reverse ?rest) (replacement-of operation)))
                                                          (output-element-operation (operation-of (recurse-reader recursion (make-command (gesture-of input) input-element-operation :domain (domain-of input) :description (description-of input)) (elt (element-iomaps-of printer-iomap) element-index)))))
                                                     (when (typep output-element-operation 'operation/sequence/replace-element-range)
                                                       (append (target-of output-element-operation)
                                                               `((the ,(form-type element) (elt (the sequence document) ,element-index))
                                                                 (the sequence (elements-of (the book/chapter document)))))))))
                                           (make-operation/sequence/replace-element-range printer-input it (replacement-of operation))))
                                        (operation/show-context-sensitive-help
                                         (make-instance 'operation/show-context-sensitive-help
                                                        :commands (iter (for command :in (commands-of operation))
                                                                        (awhen (recurse (operation-of command))
                                                                          (collect (make-instance 'command
                                                                                                  :gesture (gesture-of command)
                                                                                                  :domain (domain-of command)
                                                                                                  :description (description-of command)
                                                                                                  :operation it))))))
                                        (operation/compound
                                         (bind ((operations (mapcar #'recurse (elements-of operation))))
                                           (unless (some 'null operations)
                                             (make-operation/compound operations)))))))
                             (recurse (operation-of input)))
                      (make-command (gesture-of input) it
                                    :domain (domain-of input)
                                    :description (description-of input)))
                    (gesture-case (gesture-of input)
                      ((gesture/keyboard/key-press :sdl-key-delete)
                       :domain "Book" :description "Deletes the chapter"
                       :operation (pattern-case (selection-of printer-input)
                                    (((the book/chapter document) . ?rest)
                                     (make-operation/replace-target printer-iomap nil (document/nothing))))))
                    (make-command/nothing (gesture-of input)))))

(def reader book/paragraph->tree/leaf (projection recursion input printer-iomap)
  (bind ((printer-input (input-of printer-iomap)))
    (merge-commands (awhen (labels ((recurse (operation)
                                      (typecase operation
                                        (operation/quit operation)
                                        (operation/functional operation)
                                        (operation/replace-selection
                                         (awhen (pattern-case (reverse (selection-of operation))
                                                  (((the text/text (content-of (the tree/leaf document)))
                                                    (the text/text (text/subseq (the text/text document) ?start-character-index ?end-character-index)))
                                                   (if (zerop (text/length (content-of printer-input)))
                                                       (append (selection-of operation) `((the tree/leaf (printer-output (the book/paragraph document) ,projection ,recursion))))
                                                       `((the text/text (text/subseq (the text/text document) ,?start-character-index ,?end-character-index))
                                                         (the text/text (content-of (the book/paragraph document))))))
                                                  (?a
                                                   (append (selection-of operation) `((the tree/leaf (printer-output (the book/paragraph document) ,projection ,recursion))))))
                                           (make-operation/replace-selection printer-input it)))
                                        (operation/sequence/replace-element-range
                                         (awhen (pattern-case (reverse (target-of operation))
                                                  (((the text/text (content-of (the tree/leaf document)))
                                                    (the text/text (text/subseq (the text/text document) ?start-character-index ?end-character-index)))
                                                   (if (zerop (text/length (content-of printer-input)))
                                                       (when (= ?start-character-index ?end-character-index)
                                                         `((the text/text (text/subseq (the text/text document) 0 0))
                                                           (the text/text (content-of (the book/paragraph document)))))
                                                       `((the text/text (text/subseq (the text/text document) ,?start-character-index ,?end-character-index))
                                                         (the text/text (content-of (the book/paragraph document)))))))
                                           (make-operation/sequence/replace-element-range printer-input it (replacement-of operation))))
                                        (operation/show-context-sensitive-help
                                         (make-instance 'operation/show-context-sensitive-help
                                                        :commands (iter (for command :in (commands-of operation))
                                                                        (awhen (recurse (operation-of command))
                                                                          (collect (make-instance 'command
                                                                                                  :gesture (gesture-of command)
                                                                                                  :domain (domain-of command)
                                                                                                  :description (description-of command)
                                                                                                  :operation it))))))
                                        (operation/compound
                                         (bind ((operations (mapcar #'recurse (elements-of operation))))
                                           (unless (some 'null operations)
                                             (make-operation/compound operations)))))))
                             (recurse (operation-of input)))
                      (make-command (gesture-of input) it
                                    :domain (domain-of input)
                                    :description (description-of input)))
                    (gesture-case (gesture-of input)
                      ((gesture/keyboard/key-press :sdl-key-p :control)
                       :domain "Book" :description "Switches to generic tree notation"
                       :operation (make-operation/functional (lambda () (setf (projection-of printer-input) (recursive (make-projection/t->tree)))))))
                    (make-command/nothing (gesture-of input)))))

(def reader book/picture->tree/leaf (projection recursion input printer-iomap)
  (bind ((printer-input (input-of printer-iomap)))
    (merge-commands (awhen (labels ((recurse (operation)
                                      (typecase operation
                                        (operation/quit operation)
                                        (operation/functional operation)
                                        (operation/replace-selection
                                         (awhen (pattern-case (reverse (selection-of operation))
                                                  (((the text/text (content-of (the tree/leaf document)))
                                                    (the text/text (text/subseq (the text/text document) ?start-character-index ?end-character-index)))
                                                   `((the string (subseq (the string document) ,?start-character-index ,?end-character-index))
                                                     (the string (filename-of (the image/image document)))
                                                     (the image/image (content-of (the book/picture document)))))
                                                  (?a
                                                   (append (selection-of operation) `((the tree/leaf (printer-output (the book/picture document) ,projection ,recursion))))))
                                           (make-operation/replace-selection printer-input it)))
                                        (operation/sequence/replace-element-range
                                         (awhen (pattern-case (reverse (target-of operation))
                                                  (((the text/text (content-of (the tree/leaf document)))
                                                    (the text/text (text/subseq (the text/text document) ?start-character-index ?end-character-index)))
                                                   (if (zerop (length (namestring (filename-of (content-of printer-input)))))
                                                       (when (= ?start-character-index ?end-character-index)
                                                         `((the string (subseq (the string document) 0 0))
                                                           (the string (filename-of (the image/image document)))
                                                           (the image/image (content-of (the book/picture document)))))
                                                       `((the string (subseq (the string document) ,?start-character-index ,?end-character-index))
                                                         (the string (filename-of (the image/image document)))
                                                         (the image/image (content-of (the book/picture document)))))))
                                           (make-operation/sequence/replace-element-range printer-input it (replacement-of operation))))
                                        (operation/show-context-sensitive-help
                                         (make-instance 'operation/show-context-sensitive-help
                                                        :commands (iter (for command :in (commands-of operation))
                                                                        (awhen (recurse (operation-of command))
                                                                          (collect (make-instance 'command
                                                                                                  :gesture (gesture-of command)
                                                                                                  :domain (domain-of command)
                                                                                                  :description (description-of command)
                                                                                                  :operation it))))))
                                        (operation/compound
                                         (bind ((operations (mapcar #'recurse (elements-of operation))))
                                           (unless (some 'null operations)
                                             (make-operation/compound operations)))))))
                             (recurse (operation-of input)))
                      (make-command (gesture-of input) it
                                    :domain (domain-of input)
                                    :description (description-of input)))
                    (gesture-case (gesture-of input)
                      ((gesture/keyboard/key-press :sdl-key-p :control)
                       :domain "Book" :description "Switches to generic tree notation"
                       :operation (make-operation/functional (lambda () (setf (projection-of printer-input) (recursive (make-projection/t->tree)))))))
                    (make-command/nothing (gesture-of input)))))
