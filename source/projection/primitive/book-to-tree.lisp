;;; -*- mode: Lisp; Syntax: Common-Lisp; -*-
;;;
;;; Copyright (c) 2009 by the authors.
;;;
;;; See LICENCE for details.

(in-package :projectured)

;;;;;;
;;; Projection

(def projection book/book->tree/node ()
  ())

(def projection book/chapter->tree/node ()
  ())

;;;;;;
;;; Construction

(def (function e) make-projection/book/book->tree/node ()
  (make-projection 'book/book->tree/node))

(def (function e) make-projection/book/chapter->tree/node ()
  (make-projection 'book/chapter->tree/node))

;;;;;;
;;; Printer

(def printer book/book->tree/node (projection recursion input input-reference)
  (bind ((element-iomaps (iter (for index :from 0)
                               (for element :in-sequence (elements-of input))
                               (for element-iomap = (recurse-printer recursion element
                                                                     `((elt (the sequence document) ,index)
                                                                       (the sequence (elements-of (the book/book document)))
                                                                       ,@(typed-reference (form-type input) input-reference))))
                               ;; KLUDGE:
                               (setf (indentation-of (output-of element-iomap)) 0)
                               (collect element-iomap)))
         (authors (authors-of input))
         (title-selection (pattern-case (reverse (selection-of input))
                            (((the string (title-of (the book/book document)))
                              (the sequence-position (pos (the string document) ?character-index)))
                             `((the sequence-position (text/pos (the text/text document) ,?character-index))
                               (the text/text (content-of (the tree/leaf document)))
                               (the tree/leaf (elt (the sequence document) 0))
                               (the sequence (children-of (the tree/node document)))))
                            (((the string (title-of (the book/book document)))
                              (the string document))
                             '((the tree/leaf document)
                               (the tree/leaf (elt (the sequence document) 0))
                               (the sequence (children-of (the tree/node document)))))))
         (author-selection (pattern-case (reverse (selection-of input))
                             (((the sequence (authors-of (the book/book document)))
                               (the string (elt (the sequence document) ?author-index))
                               (the sequence-position (pos (the string document) ?character-index)))
                              `((the sequence-position (text/pos (the text/text document) ,?character-index))
                                (the text/text (content-of (the tree/leaf document)))
                                (the tree/leaf (elt (the sequence document) ,?author-index))
                                (the sequence (children-of (the tree/node document)))
                                (the tree/node (elt (the sequence document) 1))
                                (the sequence (children-of (the tree/node document)))))
                             (((the tree/node (printer-output (the book/book document) ?projection ?recursion)) . ?rest)
                              (when (and (eq projection ?projection) (eq recursion ?recursion))
                                (reverse ?rest)))))
         (output-selection (or title-selection author-selection
                               (pattern-case (reverse (selection-of input))
                                 (((the book/book document))
                                  '((the tree/node document)))
                                 (((the tree/node (printer-output (the book/book document) ?projection ?recursion)) . ?rest)
                                  (when (and (eq projection ?projection) (eq recursion ?recursion))
                                    (reverse ?rest)))
                                 (((the sequence (elements-of (the book/book document))) . ?rest)
                                  (pattern-case (reverse (selection-of (elements-of input)))
                                    (((the ?element-type (elt (the sequence document) ?element-index)) . ?rest)
                                     (bind ((element-iomap (elt element-iomaps ?element-index))
                                            (element-output (output-of element-iomap)))
                                       (append (selection-of element-output)
                                               `((the ,(form-type element-output) (elt (the sequence document) ,(+ ?element-index (if authors 2 1))))
                                                 (the sequence (children-of (the tree/node document))))))))))))
         (output (make-tree/node (append (list (tree/leaf (:selection (butlast title-selection 2))
                                                 (text/text (:selection (butlast title-selection 3))
                                                   (text/string (title-of input) :font *font/liberation/serif/bold/36* :font-color *color/solarized/red*))))
                                         (when authors
                                           (list (make-tree/node (iter (for index :from 0)
                                                                       (for author :in-sequence authors)
                                                                       (for x = (tree/leaf (:selection (butlast author-selection 4))
                                                                                  (text/text (:selection (butlast author-selection 5))
                                                                                    (text/string author :font *font/liberation/serif/italic/14* :font-color *color/solarized/content/darker*))))
                                                                       (collect x))
                                                                 :opening-delimiter (text/text () (text/string "Written by " :font *font/liberation/serif/italic/14* :font-color *color/solarized/content/darker*))
                                                                 :separator (text/text () (text/string ", " :font *font/liberation/serif/italic/14* :font-color *color/solarized/content/darker*))
                                                                 :indentation 0
                                                                 :selection (butlast author-selection 2))))
                                         (mapcar 'output-of element-iomaps))
                                 :selection output-selection)))
    (make-iomap/compound projection recursion input input-reference output element-iomaps)))

(def printer book/chapter->tree/node (projection recursion input input-reference)
  (bind ((element-iomaps (when (expanded-p input)
                           (iter (for index :from 0)
                                 (for element :in-sequence (elements-of input))
                                 (for element-iomap = (recurse-printer recursion element
                                                                       `((elt (the sequence document) ,index)
                                                                         (the sequence (elements-of (the book/chapter document)))
                                                                         ,@(typed-reference (form-type input) input-reference))))
                                 ;; KLUDGE:
                                 (setf (indentation-of (output-of element-iomap)) 0)
                                 (collect element-iomap))))
         (output-selection (pattern-case (reverse (selection-of input))
                             (((the book/chapter document))
                              '((the tree/node document)))
                             (((the string (title-of (the book/chapter document)))
                               (the string document))
                              '((the tree/leaf document)
                                (the tree/leaf (elt (the sequence document) 0))
                                (the sequence (children-of (the tree/node document)))))
                             (((the string (title-of (the book/chapter document)))
                               (the sequence-position (pos (the string document) ?character-index)))
                              `((the sequence-position (text/pos (the text/text document) ,?character-index))
                                (the text/text (content-of (the tree/leaf document)))
                                (the tree/leaf (elt (the sequence document) 0))
                                (the sequence (children-of (the tree/node document)))))
                             (((the sequence (elements-of (the book/chapter document)))
                               (the ?element-type (elt (the sequence document) ?element-index))
                               . ?rest)
                              (bind ((element-iomap (elt element-iomaps ?element-index))
                                     (element-output (output-of element-iomap)))
                                (append (selection-of element-output)
                                        `((the ,(form-type element-output) (elt (the sequence document) ,(+ ?element-index 1)))
                                          (the sequence (children-of (the tree/node document)))))))))
         (title-font (pattern-case input-reference
                       (((elt (the sequence document) ?index)
                         (the sequence (elements-of (the book/chapter document)))
                         . ?rest)
                        *font/liberation/serif/regular/24*)
                       (?
                        *font/liberation/serif/bold/30*)))
         (numbering (pattern-case input-reference
                      (((elt (the sequence document) ?chapter-element-index)
                        (the sequence (elements-of (the book/chapter document)))
                        (the book/chapter (elt (the sequence document) ?book-element-index))
                        (the sequence (elements-of (the book/book document)))
                        . ?rest)
                       (string+ (write-to-string (1+ ?book-element-index)) "." (write-to-string (1+ ?chapter-element-index))))
                      (((elt (the sequence document) ?index)
                        (the sequence (elements-of (the book/book document)))
                        . ?rest)
                       (write-to-string (1+ ?index)))
                      ;; KLUDGE: these handle the case when focusing
                      (((elt (the sequence document) ?chapter-element-index-1)
                        (the sequence (elements-of (the book/chapter document)))
                        (the book/chapter (elt (the sequence document) ?chapter-element-index-2))
                        (the sequence (elements-of (the book/chapter document)))
                        . ?rest)
                       (string+ "1." (write-to-string (1+ ?chapter-element-index-2)) "." (write-to-string (1+ ?chapter-element-index-1))))
                      (((elt (the sequence document) ?index)
                        (the sequence (elements-of (the book/chapter document)))
                        . ?rest)
                       (string+ "1." (write-to-string (1+ ?index))))
                      (?a "1")))
         (output (make-tree/node (list* (tree/leaf (:selection (butlast output-selection 2))
                                          (text/text (:selection (butlast output-selection 3))
                                            (text/string (string+ numbering " " (title-of input)) :font title-font :font-color *color/solarized/blue*)))
                                        (mapcar 'output-of element-iomaps))
                                 :selection output-selection
                                 :expanded (expanded-p input))))
    (make-iomap/compound projection recursion input input-reference output element-iomaps)))

;;;;;;
;;; Reader

;; TODO: factor out common parts
(def reader book/book->tree/node (projection recursion input printer-iomap)
  (bind ((printer-input (input-of printer-iomap)))
    (make-command (gesture-of input)
                  (labels ((recurse (operation)
                             (typecase operation
                               (operation/quit operation)
                               (operation/replace-selection
                                (awhen (pattern-case (reverse (selection-of operation))
                                         (((the tree/node document))
                                          '((the book/book document)))
                                         (((the sequence (children-of (the tree/node document)))
                                           (the tree/leaf (elt (the sequence document) 0))
                                           (the tree/leaf document))
                                          '((the string document)
                                            (the string (title-of (the book/book document)))))
                                         (((the sequence (children-of (the tree/node document)))
                                           (the tree/leaf (elt (the sequence document) 0))
                                           (the text/text (content-of (the tree/leaf document)))
                                           (the sequence-position (text/pos (the text/text document) ?character-index)))
                                          `((the sequence-position (pos (the string document) ,?character-index))
                                            (the string (title-of (the book/book document)))))
                                         (((the sequence (children-of (the tree/node document)))
                                           (the ?child-type (elt (the sequence document) ?child-index))
                                           . ?rest)
                                          (bind ((authors (authors-of printer-input)))
                                            (cond ((and authors (= ?child-index 1))
                                                   (pattern-case (reverse (selection-of operation))
                                                     (((the sequence (children-of (the tree/node document)))
                                                       (the tree/node (elt (the sequence document) 1))
                                                       (the sequence (children-of (the tree/node document)))
                                                       (the tree/leaf (elt (the sequence document) ?child-index))
                                                       (the text/text (content-of (the tree/leaf document)))
                                                       (the sequence-position (text/pos (the text/text document) ?character-index)))
                                                      `((the sequence-position (pos (the string document) ,?character-index))
                                                        (the string (elt (the sequence document) ,?child-index))
                                                        (the sequence (authors-of (the book/book document)))))
                                                     (?a
                                                      (append (selection-of operation) `((the tree/node (printer-output (the book/book document) ,projection ,recursion)))))))
                                                  (t (bind ((element-index (- ?child-index (if (authors-of printer-input) 2 1)))
                                                            (element (elt (elements-of printer-input) element-index))
                                                            (input-element-operation (make-operation/replace-selection element (reverse ?rest)))
                                                            (output-element-operation (operation-of (recurse-reader recursion (make-command (gesture-of input) input-element-operation) (elt (child-iomaps-of printer-iomap) element-index)))))
                                                       (when (typep output-element-operation 'operation/replace-selection)
                                                         (append (selection-of output-element-operation)
                                                                 `((the ,(form-type element) (elt (the sequence document) ,element-index))
                                                                   (the sequence (elements-of (the book/book document)))))))))))
                                         (?a
                                          (append (selection-of operation) `((the tree/node (printer-output (the book/book document) ,projection ,recursion))))))
                                  (make-operation/replace-selection printer-input it)))
                               (operation/sequence/replace-element-range
                                (awhen (pattern-case (reverse (target-of operation))
                                         (((the sequence (children-of (the tree/node document)))
                                           (the tree/leaf (elt (the sequence document) 0))
                                           (the text/text (content-of (the tree/leaf document)))
                                           (the sequence-position (text/pos (the text/text document) ?character-index)))
                                          `((the sequence-position (pos (the string document) ,?character-index))
                                            (the string (title-of (the book/book document)))))
                                         (((the sequence (children-of (the tree/node document)))
                                           (the tree/leaf (elt (the sequence document) 0))
                                           (the text/text (content-of (the tree/leaf document)))
                                           (the sequence (text/subseq (the text/text document) ?start-character-index ?end-character-index)))
                                          `((the sequence (subseq (the string document) ,?start-character-index ,?end-character-index))
                                            (the string (title-of (the book/book document)))))
                                         (((the sequence (children-of (the tree/node document)))
                                           (the ?child-type (elt (the sequence document) ?child-index))
                                           . ?rest)
                                          (bind ((authors (authors-of printer-input)))
                                            (cond ((and authors (= ?child-index 1))
                                                   (pattern-case (reverse (target-of operation))
                                                     (((the sequence (children-of (the tree/node document)))
                                                       (the tree/node (elt (the sequence document) 1))
                                                       (the sequence (children-of (the tree/node document)))
                                                       (the tree/leaf (elt (the sequence document) ?child-index))
                                                       (the text/text (content-of (the tree/leaf document)))
                                                       (the sequence-position (text/pos (the text/text document) ?character-index)))
                                                      `((the sequence-position (pos (the string document) ,?character-index))
                                                        (the string (elt (the sequence document) ,?child-index))
                                                        (the sequence (authors-of (the book/book document)))))))
                                                  (t (bind ((element-index (- ?child-index (if (authors-of printer-input) 2 1)))
                                                            (element (elt (elements-of printer-input) element-index))
                                                            (input-element-operation (make-operation/sequence/replace-element-range element (reverse ?rest) (replacement-of operation)))
                                                            (output-element-operation (operation-of (recurse-reader recursion (make-command (gesture-of input) input-element-operation) (elt (child-iomaps-of printer-iomap) element-index)))))
                                                       (when (typep output-element-operation 'operation/sequence/replace-element-range)
                                                         (append (target-of output-element-operation)
                                                                 `((the ,(form-type element) (elt (the sequence document) ,element-index))
                                                                   (the sequence (elements-of (the book/book document))))))))))))
                                  (make-operation/sequence/replace-element-range printer-input it (replacement-of operation))))
                               (operation/show-context-sensitive-help
                                (make-instance 'operation/show-context-sensitive-help
                                               :commands (iter (for command :in (commands-of operation))
                                                               (awhen (recurse (operation-of command))
                                                                 (collect (make-instance 'command
                                                                                         :gesture (gesture-of command)
                                                                                         :domain (domain-of command)
                                                                                         :description (description-of command)
                                                                                         :operation it))))))
                               (operation/compound
                                (bind ((operations (mapcar #'recurse (elements-of operation))))
                                  (unless (some 'null operations)
                                    (make-operation/compound operations)))))))
                    (recurse (operation-of input)))
                  :domain (domain-of input)
                  :description (description-of input))))

(def reader book/chapter->tree/node (projection recursion input printer-iomap)
  (declare (ignore projection))
  (bind ((printer-input (input-of printer-iomap)))
    (make-command (gesture-of input)
                  (labels ((recurse (operation)
                             (typecase operation
                               (operation/quit operation)
                               (operation/replace-selection
                                (make-operation/replace-selection printer-input
                                                                  (pattern-case (reverse (selection-of operation))
                                                                    (((the tree/node document))
                                                                     '((the book/chapter document)))
                                                                    (((the sequence (children-of (the tree/node document)))
                                                                      (the tree/leaf (elt (the sequence document) 0))
                                                                      (the tree/leaf document))
                                                                     '((the string document)
                                                                       (the string (title-of (the book/chapter document)))))
                                                                    (((the sequence (children-of (the tree/node document)))
                                                                      (the tree/leaf (elt (the sequence document) 0))
                                                                      (the text/text (content-of (the tree/leaf document)))
                                                                      (the sequence-position (text/pos (the text/text document) ?character-index)))
                                                                     `((the sequence-position (pos (the string document) ,?character-index))
                                                                       (the string (title-of (the book/chapter document)))))
                                                                    (((the sequence (children-of (the tree/node document)))
                                                                      (the ?child-type (elt (the sequence document) ?child-index))
                                                                      . ?rest)
                                                                     (bind ((element-index (- ?child-index 1))
                                                                            (element (elt (elements-of printer-input) element-index))
                                                                            (input-element-operation (make-operation/replace-selection element (reverse ?rest)))
                                                                            (output-element-operation (operation-of (recurse-reader recursion (make-command (gesture-of input) input-element-operation) (elt (child-iomaps-of printer-iomap) element-index)))))
                                                                       (when (typep output-element-operation 'operation/replace-selection)
                                                                         (append (selection-of output-element-operation)
                                                                                 `((the ,(form-type element) (elt (the sequence document) ,element-index))
                                                                                   (the sequence (elements-of (the book/chapter document)))))))))))
                               (operation/sequence/replace-element-range
                                (awhen (pattern-case (reverse (target-of operation))
                                         (((the sequence (children-of (the tree/node document)))
                                           (the tree/leaf (elt (the sequence document) 0))
                                           (the text/text (content-of (the tree/leaf document)))
                                           (the sequence-position (text/pos (the text/text document) ?character-index)))
                                          `((the sequence-position (pos (the string document) ,?character-index))
                                            (the string (title-of (the book/chapter document)))))
                                         (((the sequence (children-of (the tree/node document)))
                                           (the tree/leaf (elt (the sequence document) 0))
                                           (the text/text (content-of (the tree/leaf document)))
                                           (the sequence (text/subseq (the text/text document) ?start-character-index ?end-character-index)))
                                          `((the sequence (subseq (the string document) ,?start-character-index ,?end-character-index))
                                            (the string (title-of (the book/chapter document)))))
                                         (((the sequence (children-of (the tree/node document)))
                                           (the ?child-type (elt (the sequence document) ?child-index))
                                           . ?rest)
                                          (bind ((element-index (- ?child-index 1))
                                                 (element (elt (elements-of printer-input) element-index))
                                                 (input-element-operation (make-operation/sequence/replace-element-range element (reverse ?rest) (replacement-of operation)))
                                                 (output-element-operation (operation-of (recurse-reader recursion (make-command (gesture-of input) input-element-operation) (elt (child-iomaps-of printer-iomap) element-index)))))
                                            (when (typep output-element-operation 'operation/sequence/replace-element-range)
                                              (append (target-of output-element-operation)
                                                      `((the ,(form-type element) (elt (the sequence document) ,element-index))
                                                        (the sequence (elements-of (the book/chapter document)))))))))
                                  (make-operation/sequence/replace-element-range printer-input it (replacement-of operation))))
                               (operation/show-context-sensitive-help
                                (make-instance 'operation/show-context-sensitive-help
                                               :commands (iter (for command :in (commands-of operation))
                                                               (awhen (recurse (operation-of command))
                                                                 (collect (make-instance 'command
                                                                                         :gesture (gesture-of command)
                                                                                         :domain (domain-of command)
                                                                                         :description (description-of command)
                                                                                         :operation it))))))
                               (operation/compound
                                (bind ((operations (mapcar #'recurse (elements-of operation))))
                                  (unless (some 'null operations)
                                    (make-operation/compound operations)))))))
                    (recurse (operation-of input)))
                  :domain (domain-of input)
                  :description (description-of input))))
