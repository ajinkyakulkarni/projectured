;;; -*- mode: Lisp; Syntax: Common-Lisp; -*-
;;;
;;; Copyright (c) 2009 by the authors.
;;;
;;; See LICENCE for details.

(in-package :projectured)

;;;;;;
;;; Document

;; TODO: ?
#+nil
(workbench/workbench (:open-elements (list introduction-document))
  (workbench/folder (:name "Documentation")
    (workbench/document (:name "Introduction")
      (make-introduction-document)))
  (workbench/folder (:name "File System")
    (workbench/file-system (:name "Examples") #P"/home/levy/projectured/examples")
    (workbench/file-system (:name "Home") #P"/home/levy")
    (workbench/file-system (:name "Computer") #P"/")))

(def function make-initial-document ()
  (bind ((welcome-page (document/document (:filename (resource-pathname "example/welcome-to-projectured.pred"))
                         (book/book (:title "Welcome to ProjecturEd" :selection '((the string (subseq (the string document) 0 0)) (the string (title-of (the book/book document)))) :authors (list "Levente Mészáros"))
                           (book/chapter (:title "Introduction")
                             (book/paragraph ()
                               (text/text ()
                                 (text/string "ProjecturEd is a generic purpose projectional editor. It provides editing for many kind of documents, it even supports mixed documents combining different domains. Iit also allows editing through multiple different views, sorting, filtering, etc." :font *font/ubuntu/regular/18* :font-color *color/solarized/content/darker*))))
                           (book/chapter (:title "Cheet Sheet" :selection '((the string (subseq (the string document) 0 0)) (the string (title-of (the book/chapter document)))))
                             (book/paragraph (:selection '((the text/text (text/subseq (the text/text document) 0 0)) (the text/text (content-of (the book/paragraph document)))))
                               (text/text (:selection '((the text/text (text/subseq (the text/text document) 0 0))))
                                 (text/string "Use the CURSOR keys to navigate around as you would do in a text editor. Use the mouse wheel to scroll vertically and SHIFT + mouse wheel to scroll horizontally. Type in text wherever you feel it is appropriate. Press CONTROL + H to get context sensitive help. Press INSERT to insert new parts into the document in a generic way. Finally, press ESC to quit." :font *font/ubuntu/regular/18* :font-color *color/solarized/content/darker*))))
                           (book/chapter (:title "Home Page")
                             (book/paragraph ()
                               (text/text ()
                                 (text/string "Visit " :font *font/ubuntu/regular/18* :font-color *color/solarized/content/darker*)
                                 (text/string "http://projectured.org" :font *font/ubuntu/regular/18* :font-color *color/solarized/blue*)
                                 (text/string " or " :font *font/ubuntu/regular/18* :font-color *color/solarized/content/darker*)
                                 (text/string "http://github.com/projectured/projectured" :font *font/ubuntu/regular/18* :font-color *color/solarized/blue*)
                                 (text/string " for more information." :font *font/ubuntu/regular/18* :font-color *color/solarized/content/darker*)))))))
         (json-domain (document/document (:filename (resource-pathname "example/json-domain.pred"))
                        (book/book (:title "JSON Domain" :selection '((the string (subseq (the string document) 0 0)) (the string (title-of (the book/book document)))))
                          (book/chapter (:title "Cheet Sheet")
                            (book/paragraph ()
                              (text/text ()
                                (text/string "Press \" to insert a new JSON string. Press [ to insert a new JSON array. Press { to insert a new JSON object." :font *font/ubuntu/regular/18* :font-color *color/solarized/content/darker*))))
                          (book/chapter (:title "Example")
                            (book/paragraph ()
                              (text/text ()
                                (text/string "Here is a simple contact list in JSON format." :font *font/ubuntu/regular/18* :font-color *color/solarized/content/darker*)))
                            (json/array ()
                              (json/object ()
                                ("name" (json/string () "Levente Mészáros"))
                                ("sex" (json/string () "male"))
                                ("born" (json/number () 1975)))
                              (json/object ()
                                ("name" (json/string () "Attila Lendvai"))
                                ("sex" (json/string () "male"))
                                ("born" (json/number () 1978))))))))
         (xml-domain (document/document (:filename (resource-pathname "example/xml-domain.pred"))
                       (book/book (:title "XML Domain" :selection '((the string (subseq (the string document) 0 0)) (the string (title-of (the book/book document)))))
                         (book/chapter (:title "Cheet Sheet")
                           (book/paragraph ()
                             (text/text ()
                               (text/string "Press < to insert a new XML element. Press \" to insert a new XML text." :font *font/ubuntu/regular/18* :font-color *color/solarized/content/darker*))))
                         (book/chapter (:title "Example")
                           (book/paragraph ()
                             (text/text ()
                               (text/string "Here is a simple HTML web page in XML format." :font *font/ubuntu/regular/18* :font-color *color/solarized/content/darker*)))
                           (xml/element ("html" ())
                             (xml/element ("head" ())
                               (xml/element ("title" ())
                                 (xml/text () "Hello World")))
                             (xml/element ("body" ())
                               (xml/element ("h1" ((xml/attribute () "id" "e0")))
                                 (xml/text () "Hello World"))
                               (xml/element ("p" ((xml/attribute () "id" "e1")))
                                 (xml/text () "A simple web page."))))))))
         (tabbed-pane (widget/tabbed-pane ()
                        ((widget/label (:location (make-2d 5 5) :margin (make-inset :all 5))
                           (text/text ()
                             (text/string "Welcome Page" :font *font/ubuntu/regular/18* :font-color *color/solarized/content/darker*)))
                         (widget/scroll-pane (:location (make-2d 0 0) :size (make-2d 1025 689) :margin (make-inset :all 5))
                           welcome-page))
                        ((widget/label (:location (make-2d 5 5) :margin (make-inset :all 5))
                           (text/text ()
                             (text/string "JSON" :font *font/ubuntu/regular/18* :font-color *color/solarized/content/darker*)))
                         (widget/scroll-pane (:location (make-2d 0 0) :size (make-2d 1025 689) :margin (make-inset :all 5))
                           json-domain))
                        ((widget/label (:location (make-2d 5 5) :margin (make-inset :all 5))
                           (text/text ()
                             (text/string "XML" :font *font/ubuntu/regular/18* :font-color *color/solarized/content/darker*)))
                         (widget/scroll-pane (:location (make-2d 0 0) :size (make-2d 1025 689) :margin (make-inset :all 5))
                           xml-domain)))))
    (widget/shell ()
      (widget/split-pane (:selection '((the widget/tabbed-pane (elt (the sequence document) 1)) (the sequence (elements-of (the widget/split-pane document)))))
        (widget/scroll-pane (:location (make-2d 0 0) :size (make-2d 250 720) :margin (make-inset :all 5))
          (make-file-system/pathname (resource-pathname "example/") tabbed-pane))
        tabbed-pane))))
