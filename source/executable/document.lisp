;;; -*- mode: Lisp; Syntax: Common-Lisp; -*-
;;;
;;; Copyright (c) 2009 by the authors.
;;;
;;; See LICENCE for details.

(in-package :projectured)

;;;;;;
;;; Document

(def document web-example/natural ()
  ((content :type document)))

(def document web-example/brief ()
  ((content :type document)))

(def document web-example/emitting ()
  ((content :type document)))

(def document web-example/folded ()
  ((content :type document)))

(def function text/normal (content)
  (text/string content :font *font/liberation/serif/regular/24* :font-color *color/solarized/content/darker*))

(def function text/emphasis (content)
  (text/string content :font *font/liberation/serif/italic/24* :font-color *color/solarized/violet*))

(def function text/make-process-text (content &optional (keywords '("ProjecturEd" "Google" "Charts" "API" "HTTP" "HTML" "DIV" "URL" "Book" "Table" "CSS" "JSON" "XML" "JavaScript" "Common Lisp" "Tree" "Text" "Graphics" "write-string" "read-eval-print-loop" "REPL" "lazy" "incremental")))
  (text/make-text (iter (for start-position :initially 0 :then (+ found-position (length keyword)))
                        (for (values keyword found-position) = (iter (with found-keyword)
                                                                     (with found-position)
                                                                     (for keyword :in keywords)
                                                                     (for keyword-position = (search keyword content :start2 start-position))
                                                                     (when (and keyword-position
                                                                                (or (not found-position)
                                                                                    (< keyword-position found-position)))
                                                                       (setf found-position keyword-position)
                                                                       (setf found-keyword keyword))
                                                                     (finally (return (values found-keyword found-position)))))
                        (if found-position
                            (progn
                              (unless (= start-position found-position)
                                (collect (text/normal (subseq content start-position found-position))))
                              (collect (text/emphasis keyword)))
                            (progn
                              (unless (= start-position (length content))
                                (collect (text/normal (subseq content start-position))))
                              (finish))))))

(def function make-initial-document/welcome-page ()
  (book/book (:title "Welcome to ProjecturEd" :selection '((the string (subseq (the string document) 0 0)) (the string (title-of (the book/book document)))) :author "Levente Mészáros")
    (book/chapter (:title "Introduction")
      (book/paragraph (:alignment :justified)
        (text/text ()
          (text/normal "ProjecturEd is a general purpose projectional editor written in Common Lisp.")))
      (book/paragraph (:alignment :justified)
        (text/text ()
          (text/normal "It supports the integrated presentation and editing of arbitrary domains. The edited data is represented in their natural, domain specific data structures (as opposed to a flat string of characters), which accommodates for the implementation of many interesting, but yet to be explored features of structured editing.")))
      (book/paragraph (:alignment :justified)
        (text/text ()
          (text/normal "It also supports multiple projections of the same object, and thus it can simultaneously provide different notations, potentially all of them editable. These views can be textual or fully graphical, are easy to add to the framework, and due to the architecture they combine well."))))
    (book/chapter (:title "Cheet Sheet" :selection '((the string (subseq (the string document) 0 0)) (the string (title-of (the book/chapter document)))))
      (book/paragraph (:alignment :justified :selection '((the text/text (text/subseq (the text/text document) 0 0)) (the text/text (content-of (the book/paragraph document)))))
        (text/text (:selection '((the text/text (text/subseq (the text/text document) 0 0))))
          (text/normal "Use the CURSOR keys to navigate around as you would do in a text editor. Use the mouse wheel to scroll vertically and SHIFT + mouse wheel to scroll horizontally. Type in text wherever you feel it is appropriate. Press CONTROL + H to get context sensitive help. Press INSERT to insert new parts into the document in a generic way. Finally, press ESC to quit."))))
    (book/chapter (:title "Home Page")
      (book/paragraph (:alignment :justified)
        (text/text ()
          (text/graphics (image/file () (resource-pathname "image/lisp-boxed-alien.jpg")))
          (text/newline)
          (text/normal "Visit ")
          (text/emphasis "http://projectured.org")
          (text/normal " or ")
          (text/emphasis "http://github.com/projectured/projectured")
          (text/normal " for more information."))))))

(def function make-initial-document/json-example ()
  (book/book (:title "A JSON Example" :selection '((the string (subseq (the string document) 0 0)) (the string (title-of (the book/book document)))))
    (book/chapter (:title "Cheet Sheet")
      (book/paragraph (:alignment :justified)
        (text/text ()
          (text/normal "Press \" to insert a new JSON string. Press [ to insert a new JSON array. Press { to insert a new JSON object."))))
    (book/chapter (:title "Example")
      (book/paragraph (:alignment :justified)
        (text/text ()
          (text/normal "Here is a simple contact list in JSON format.")))
      (book/paragraph ()
        (json/array ()
          (json/object ()
            ("name" (json/string () "Levente Mészáros"))
            ("sex" (json/string () "male"))
            ("born" (json/number () 1975)))
          (json/object ()
            ("name" (json/string () "Attila Lendvai"))
            ("sex" (json/string () "male"))
            ("born" (json/number () 1978))))))))

(def function make-initial-document/xml-example ()
  (book/book (:title "An XML Example" :selection '((the string (subseq (the string document) 0 0)) (the string (title-of (the book/book document)))))
    (book/chapter (:title "Cheet Sheet")
      (book/paragraph (:alignment :justified)
        (text/text ()
          (text/normal "Press < to insert a new XML element. Press \" to insert a new XML text."))))
    (book/chapter (:title "Example")
      (book/paragraph (:alignment :justified)
        (text/text ()
          (text/normal "Here is a simple HTML web page in XML format.")))
      (book/paragraph ()
        (xml/element ("html" ())
          (xml/element ("head" ())
            (xml/element ("title" ())
              (xml/text () "Hello World")))
          (xml/element ("body" ())
            (xml/element ("h1" ((xml/attribute () "id" "e0")))
              (xml/text () "Hello World"))
            (xml/element ("p" ((xml/attribute () "id" "e1")))
              (xml/text () "A simple web page."))))))))

(def function make-initial-document/common-lisp-example ()
  (book/book (:title "A Common Lisp Example")
    (book/chapter (:title "Cheet Sheet")
      (book/paragraph (:alignment :justified)
        (text/text ()
          (text/normal "Press ( to insert a new Common Lisp function application."))))
    (book/chapter (:title "Example")
      (book/paragraph (:alignment :justified)
        (text/text ()
          (text/normal "Here is a Common Lisp FACTORIAL function.")))
      (bind ((factorial-argument (make-common-lisp/required-function-argument (make-lisp-form/symbol* 'n)))
             (factorial-function (make-common-lisp/function-definition (make-lisp-form/symbol "FACTORIAL" "PROJECTURED")
                                                                       (list factorial-argument)
                                                                       nil
                                                                       :allow-other-keys #f
                                                                       :documentation "Computes the factorial of N")))
        (setf (body-of factorial-function)
              (list (make-common-lisp/if (make-common-lisp/application (make-lisp-form/symbol* '<)
                                                                       (list (make-common-lisp/variable-reference factorial-argument)
                                                                             (make-common-lisp/constant 2)))
                                         (make-common-lisp/constant 1)
                                         (make-common-lisp/application (make-lisp-form/symbol* '*)
                                                                       (list (make-common-lisp/variable-reference factorial-argument)
                                                                             (make-common-lisp/application (make-common-lisp/function-reference factorial-function)
                                                                                                           (list (make-common-lisp/application
                                                                                                                  (make-lisp-form/symbol* '-)
                                                                                                                  (list (make-common-lisp/variable-reference factorial-argument)
                                                                                                                        (make-common-lisp/constant 1))))))))))
        factorial-function))))

(def function make-initial-document/empty-example ()
  (document/nothing))

(def function make-initial-document/web-example ()
  (bind ((chart-page-path (document/string () "/page"))
         (chart-css-path (document/string () "/style"))
         (chart-data-path (document/string () "/data"))
         (chart-script-path (document/string () "/script"))
         (trace-amounts (make-common-lisp/comment
                         (text/text ()
                           (text/string "This part contains " :font projectured::*font/ubuntu/regular/22* :font-color *color/solarized/gray*)
                           (text/graphics (image/file () (resource-pathname "image/lisp-flag.jpg"))))))
         (chart-script-draw (make-javascript/statement/top-level
                             (list (make-javascript/definition/variable
                                    "json"
                                    (make-javascript/expression/property-access
                                     (make-javascript/expression/method-invocation
                                      (make-javascript/expression/variable-reference "$")
                                      "ajax"
                                      (list (json/object ()
                                              ("async" (json/boolean () #f))
                                              ("url" (json/string () chart-data-path))
                                              ("dataType" (json/string () "json")))))
                                     "responseText"))
                                   (make-javascript/definition/variable
                                    "data"
                                    (make-javascript/expression/constuctor-invocation
                                     (make-javascript/expression/property-access
                                      (make-javascript/expression/property-access
                                       (make-javascript/expression/variable-reference "google")
                                       "visualization")
                                      "DataTable")
                                     (list (make-javascript/expression/variable-reference "json"))))
                                   (make-javascript/definition/variable
                                    "chart"
                                    (make-javascript/expression/constuctor-invocation
                                     (make-javascript/expression/property-access
                                      (make-javascript/expression/property-access
                                       (make-javascript/expression/variable-reference "google")
                                       "visualization")
                                      "PieChart")
                                     (list (make-javascript/expression/method-invocation
                                            (make-javascript/expression/variable-reference "document")
                                            "getElementById"
                                            (list (make-javascript/literal/string "pie"))))))
                                   (make-javascript/expression/method-invocation
                                    (make-javascript/expression/variable-reference "chart")
                                    "draw"
                                    (list (make-javascript/expression/variable-reference "data")
                                          (json/object ()
                                            ("title" (json/string () "Daily Activities"))
                                            ("is3D" (json/boolean () #t))))))))
         (chart-script (make-javascript/statement/top-level
                        (list (make-javascript/expression/method-invocation
                               (make-javascript/expression/variable-reference "google")
                               "load"
                               (list (make-javascript/literal/string "visualization")
                                     (make-javascript/literal/string "1")
                                     (json/object ()
                                       ("packages" (json/array () (json/string () "corechart"))))))
                              (make-javascript/expression/method-invocation
                               (make-javascript/expression/variable-reference "google")
                               "setOnLoadCallback"
                               (list (make-javascript/expression/variable-reference "drawPieChart")))
                              (make-javascript/definition/function "drawPieChart" nil (make-javascript/statement/block (elements-of chart-script-draw))))))
         (dispatch-table (table/table ()
                           (table/row ()
                             (table/cell ()
                               (text/text ()
                                 (text/string "HTTP request" :font *font/liberation/serif/bold/24* :font-color *color/solarized/content/darker*)))
                             (table/cell ()
                               (text/text ()
                                 (text/string "HTTP response" :font *font/liberation/serif/bold/24* :font-color *color/solarized/content/darker*))))
                           (table/row ()
                             (table/cell ()
                               (text/text ()
                                 (text/emphasis chart-page-path)))
                             (table/cell ()
                               (text/make-process-text "an HTML page that contains the pie chart")))
                           (table/row ()
                             (table/cell ()
                               (text/text ()
                                 (text/emphasis chart-css-path)))
                             (table/cell ()
                               (text/make-process-text "a CSS stylesheet that defines the page style")))
                           (table/row ()
                             (table/cell ()
                               (text/text ()
                                 (text/emphasis chart-script-path)))
                             (table/cell ()
                               (text/make-process-text "a JavaScript that dynamically creates the pie chart in the browser")))
                           (table/row ()
                             (table/cell ()
                               (text/text ()
                                 (text/emphasis chart-data-path)))
                             (table/cell ()
                               (text/make-process-text "a JSON dataset that is displayed by the pie chart")))
                           (table/row ()
                             (table/cell ()
                               (text/text ()
                                 (text/emphasis "<otherwise>")))
                             (table/cell ()
                               (text/make-process-text "an HTML error page")))))
         (chart-css (css/rule ("h1")
                      (css/attribute () "color" "#DC322F")
                      (css/attribute () "text-align" "center")))
         (chart-page-div (xml/element ("div" ((xml/attribute () "id" "pie") (xml/attribute () "style" "width: 800px; height: 600px;")))))
         (chart-page (xml/element ("html" ())
                       (xml/element ("head" ())
                         (xml/element ("title" nil)
                           (xml/text () "Pie Chart Demo"))
                         (xml/element ("link" ((xml/attribute () "type" "text/css") (xml/attribute () "rel" "stylesheet") (xml/attribute () "href" chart-css-path))))
                         (xml/element ("script" ((xml/attribute () "type" "text/javascript") (xml/attribute () "src" "https://www.google.com/jsapi"))))
                         (xml/element ("script" ((xml/attribute () "type" "text/javascript") (xml/attribute () "src" "https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"))))
                         (xml/element ("script" ((xml/attribute () "type" "text/javascript") (xml/attribute () "src" chart-script-path)))))
                       (xml/element ("body" ())
                         (xml/element ("h1" ())
                           (xml/text () "Pie Chart Demo"))
                         chart-page-div)))
         (chart-data-header (json/array ()
                              (json/object ()
                                ("label" (json/string () "Task"))
                                ("type" (json/string () "string")))
                              (json/object ()
                                ("label" (json/string () "Hours per Day"))
                                ("type" (json/string () "number")))))
         (chart-data-eat-hours (document/number () 2))
         (chart-data-commute-hours (document/number () 2))
         (chart-data-watch-tv-hours (document/number () 2))
         (chart-data-work-hours (document/number () 7))
         (chart-data-first-row (json/array ()
                                 (json/object ()
                                   ("v" (json/string () "Work")))
                                 (json/object ()
                                   ("v" (json/number () chart-data-work-hours)))))
         (chart-data-data (json/array (:key (compose 'value-of 'value-of 'first-elt 'entries-of 'first-elt 'elements-of 'value-of 'first-elt 'entries-of) :predicate 'string<)
                            (json/object ()
                              ("c" chart-data-first-row))
                            (json/object ()
                              ("c" (json/array ()
                                     (json/object ()
                                       ("v" (json/string () "Eat")))
                                     (json/object ()
                                       ("v" (json/number () chart-data-eat-hours))))))
                            (json/object ()
                              ("c" (json/array ()
                                     (json/object ()
                                       ("v" (json/string () "Commute")))
                                     (json/object ()
                                       ("v" (json/number () chart-data-commute-hours))))))
                            (json/object ()
                              ("c" (json/array ()
                                     (json/object ()
                                       ("v" (json/string () "Internet")))
                                     (json/object ()
                                       ("v" (json/number () chart-data-watch-tv-hours))))))
                            (json/object ()
                              ("c" (json/array ()
                                     (json/object ()
                                       ("v" (json/string () "Sleep")))
                                     (json/object ()
                                       ("v" (make-common-lisp/application (make-lisp-form/symbol* 'write-number) (list (make-common-lisp/application (make-lisp-form/symbol* '-) (list (make-common-lisp/constant (document/number () 24)) (make-common-lisp/constant chart-data-work-hours) (make-common-lisp/constant chart-data-eat-hours) (make-common-lisp/constant chart-data-commute-hours) (make-common-lisp/constant chart-data-watch-tv-hours))))))))))))
         (chart-data (json/object ()
                       ("cols" chart-data-header)
                       ("rows" chart-data-data)))
         (request-variable (make-common-lisp/required-function-argument (make-lisp-form/symbol* 'request)))
         (path-variable (make-common-lisp/lexical-variable-binding (make-lisp-form/symbol* 'path) (make-common-lisp/application (make-lisp-form/symbol "RAW-URI-OF" "HU.DWIM.WEB-SERVER")
                                                                                                                                (list (make-common-lisp/variable-reference request-variable)))))
         (error-page-message (xml/element ("p" ())
                               (xml/text () "We are very sorry, the '")
                               (xml/element ("i" ()) (make-common-lisp/top-level (list trace-amounts (make-common-lisp/application (make-lisp-form/symbol* 'write-string) (list (make-common-lisp/variable-reference path-variable))))))
                               (xml/text () "' page is not found.")))
         (error-page (xml/element ("html" ())
                       (xml/element ("head" ())
                         (xml/element ("title" ())
                           (xml/text () "Error 404 (Not Found)")))
                       (xml/element ("body" ())
                         error-page-message)))
         (server-handler (make-common-lisp/function-definition (make-lisp-form/symbol* 'handle-http-request) nil (list (make-common-lisp/application (make-lisp-form/symbol "SEND-RESPONSE" "HU.DWIM.WEB-SERVER")
                                                                                                                                                     (list (make-common-lisp/application (make-lisp-form/symbol "MAKE-FUNCTIONAL-RESPONSE*" "HU.DWIM.WEB-SERVER")
                                                                                                                                                                                         (list (make-common-lisp/lambda-function nil (list (make-common-lisp/application (make-lisp-form/symbol* 'process-http-request) (list (make-common-lisp/variable-reference (make-common-lisp/special-variable-definition (make-lisp-form/symbol "*REQUEST*" "HU.DWIM.WEB-SERVER") nil)))))))))))))
         (server-variable (make-common-lisp/special-variable-definition (make-lisp-form/symbol "*DEMO-SERVER*" "PROJECTURED.TEST")
                                                                        (make-common-lisp/application (make-lisp-form/symbol* 'make-instance)
                                                                                                      (list (make-common-lisp/constant (when (find-package :hu.dwim.web-server) (find-symbol "SERVER" "HU.DWIM.WEB-SERVER")))
                                                                                                            (make-common-lisp/constant :host) (make-common-lisp/variable-reference (make-common-lisp/special-variable-definition (make-lisp-form/symbol "+ANY-HOST+" "IOLIB.SOCKETS") nil))
                                                                                                            (make-common-lisp/constant :port) (make-common-lisp/constant 8080)
                                                                                                            (make-common-lisp/constant :handler)
                                                                                                            (make-common-lisp/constant 'handle-http-request)))))
         (process-http-function (make-common-lisp/function-definition (make-lisp-form/symbol* 'process-http-request)
                                                                      (list request-variable)
                                                                      (list (make-common-lisp/comment
                                                                             (text/text ()
                                                                               (text/string "dispatch on the path of the incoming HTTP request according to the following table" :font *font/ubuntu/monospace/regular/24* :font-color *color/solarized/gray*)))
                                                                            dispatch-table
                                                                            (make-common-lisp/let (list path-variable (make-common-lisp/lexical-variable-binding (make-lisp-form/symbol* '*standard-output*) (make-common-lisp/application (make-lisp-form/symbol "CLIENT-STREAM-OF" "HU.DWIM.WEB-SERVER")
                                                                                                                                                                                                                                           (list (make-common-lisp/variable-reference request-variable)))))
                                                                                                  (list (make-common-lisp/if (make-common-lisp/application (make-lisp-form/symbol* 'string=)
                                                                                                                                                           (list (make-common-lisp/constant chart-page-path)
                                                                                                                                                                 (make-common-lisp/variable-reference path-variable)))
                                                                                                                             chart-page
                                                                                                                             (make-common-lisp/if (make-common-lisp/application (make-lisp-form/symbol* 'string=)
                                                                                                                                                                                (list (make-common-lisp/constant chart-css-path)
                                                                                                                                                                                      (make-common-lisp/variable-reference path-variable)))
                                                                                                                                                  chart-css
                                                                                                                                                  (make-common-lisp/if (make-common-lisp/application (make-lisp-form/symbol* 'string=)
                                                                                                                                                                                                     (list (make-common-lisp/constant chart-script-path)
                                                                                                                                                                                                           (make-common-lisp/variable-reference path-variable)))
                                                                                                                                                                       chart-script
                                                                                                                                                                       (make-common-lisp/if (make-common-lisp/application (make-lisp-form/symbol* 'string=)
                                                                                                                                                                                                                          (list (make-common-lisp/constant chart-data-path)
                                                                                                                                                                                                                                (make-common-lisp/variable-reference path-variable)))
                                                                                                                                                                                            chart-data
                                                                                                                                                                                            error-page)))))))
                                                                      :allow-other-keys #f
                                                                      :documentation "This function processes all incoming HTTP requests.")))
    (book/book (:title "Creating a Simple Web Page with ProjecturEd" :author "Levente Mészáros")
      (book/chapter (:title "Introduction")
        (book/paragraph (:alignment :justified)
          (text/make-process-text "ProjecturEd is a generic purpose projectional editor. It supports the integrated presentation and editing of documents of arbitrary problem domains. It represents the edited documents using natural, domain specific data structures. It also supports freely mixing these data structures which accommodates for the implementation of many interesting features."))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "The editor communicates with the user in a similar way to the well known and widely used read-eval-print-loop. Simply speaking, the REPL is a very powerful and generic way to talk to the computer. The main difference from the standard REPL is that it has to handle different kind of input and output devices simultaneously. The editor currently supports the following devices: keyboard, mouse and graphical display."))
        (book/paragraph (:alignment :center)
          (text/text ()
            (text/graphics (image/file () (resource-pathname "image/repl-small.png")))))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "The printer part of the REPL prints the edited document to the output devices. The reader part of the REPL reads changes to be applied to the edited document from the input devices. The projectional editor is built from the composition of small bidirectional projections that simultaneously form the printer and the reader algorithms. The projections transform domain specific documents and document changes between problem domains."))
        (book/paragraph ()
          (text/make-process-text "The editor already allows the combination of a number of problem domains: Book, Table, Tree, Text, Graphics, XML, CSS, JSON, JavaScript, Common Lisp, etc. Each problem domain adds a number of small document data structures: Book chapter, Text paragraph, Table cell, Tree node, XML attribute, CSS rule, JSON array, JavaScript function application, Common Lisp function definition, etc."))
        (book/paragraph ()
          (text/make-process-text "The editor combines several projections that can be classified into the following categories:"))
        (book/list ()
          (book/paragraph ()
            (text/make-process-text "domain to domain projections: JSON ↔ Tree, XML ↔ Tree, Common Lisp ↔ Tree, Tree ↔ Text, Text ↔ Graphics, etc."))
          (book/paragraph ()
            (text/make-process-text "domain preserving projections: word wrapping, line numbering, text/structural searching, sequence sorting/filtering, etc."))
          (book/paragraph ()
            (text/make-process-text "domain independent projections: identity preserving, copying, structural focusing, templating, etc."))
          (book/paragraph ()
            (text/make-process-text "higher order projections: sequential, nesting, recursive, alternative, identity/reference/type/predicate dispatching, etc.")))
        (book/paragraph ()
          (text/make-process-text "The implementation is based on automatic constraint based change propagation. The algorithm is similar to functional reactive programming. In order to achieve acceptable performance algorithms must be lazy and incremental with respect to the amount of necessary computation.")))
      (book/chapter (:title "Description of the Task")
        (book/paragraph (:alignment :justified)
          (text/make-process-text "This document demonstrates the features of projectional editing in the context of computer programming. The programming task is to implement a single web page that contains a pie chart. The pie chart should display the amount of time spent with a few daily activities. The server program should run in a web server and the client program should run in standard web browsers.")))
      (book/chapter (:title "Content of this Document")
        (book/paragraph (:alignment :justified)
          (text/text ()
            (text/normal "This document contains among others:")))
        (book/list ()
          (book/paragraph ()
            (text/text ()
              (text/normal "a few ")
              (text/emphasis "chapters")
              (text/normal " that help organizing the content around various topics")))
          (book/paragraph ()
            (text/text ()
              (text/normal "a few ")
              (text/emphasis "styled texts")
              (text/normal " that make reading and understanding easier")))
          (book/paragraph ()
            (text/text ()
              (text/normal "an ")
              (text/emphasis "image")
              (text/normal " that shows the expected end result in the browser")))
          (book/paragraph ()
            (text/text ()
              (text/normal "a ")
              (text/emphasis "table")
              (text/normal " that describes the URLs that the server processes")))
          (book/paragraph ()
            (text/text ()
              (text/normal "an ")
              (text/emphasis "HTML")
              (text/normal " web page that contains the pie chart")))
          (book/paragraph ()
            (text/text ()
              (text/normal "a stylesheet in ")
              (text/emphasis "CSS")
              (text/normal " format that defines a few styles")))
          (book/paragraph ()
            (text/text ()
              (text/normal "a dataset in ")
              (text/emphasis "JSON")
              (text/normal " format that provides the data for the chart")))
          (book/paragraph ()
            (text/text ()
              (text/normal "a ")
              (text/emphasis "JavaScript")
              (text/normal " program that runs in the browser")))
          (book/paragraph ()
            (text/text ()
              (text/normal "a ")
              (text/emphasis "Common Lisp")
              (text/normal " program that runs in the web server"))))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "This example uses a compound projection that displays all used domains in their natural notation. Proper indentation and syntax highlighting are automatically provided without inserting escape sequences that would make reading harder."))
        (book/paragraph (:alignment :justified)
          (text/text ()
            (text/normal "It's important to stress that the edited document ")
            (text/emphasis "is not")
            (text/normal " just a simple styled text even though it looks like. It's a complex domain specific data structure that precisely captures the intentions. The projections keep track of what is what to make navigation and editing possible."))))
      (book/chapter (:title "Description of the Solution")
        (book/paragraph (:alignment :justified)
          (text/text ()
            (text/normal "The web page is implemented as a single Common Lisp function that processes HTTP requests. When the function receives an HTTP request to the '")
            (text/emphasis chart-page-path)
            (text/normal "' path, it sends an HTML page in response. The returned page contains a pie chart that utilizes the Google Charts JavaScript API. When the browser displays the pie chart, it sends another HTTP request to the '")
            (text/emphasis chart-data-path)
            (text/normal "' path using JavaScript. For this request, the web server returns a document in JSON format that provides the data for the pie chart. For all other unknown requests, the web server sends an HTML error page. The following screenshot shows how the pie chart will look like.")))
        (book/paragraph (:alignment :center)
          (text/text ()
            (text/graphics (image/file () (resource-pathname "image/pie.png")))))
        (book/paragraph (:alignment :justified)
          (text/text ()
            (text/normal "The solution provided in this document ")
            (text/emphasis "is not")
            (text/normal " just a mock-up, it really works as described. Actually, it can be edited, compiled, and executed within the editor."))))
      (book/chapter (:title "Dispatch Mechanism")
        (book/paragraph (:alignment :justified)
          (text/text ()
            (text/normal "The following table summarizes the URLs required to be processed by the web server. It also demonstrates mixing the styled text notation with a graphical notation in the same document.")))
        (book/paragraph ()
          dispatch-table))
      (book/chapter (:title "Pie Chart Web Page")
        (book/paragraph (:alignment :justified)
          (text/text ()
            (text/normal "Let's start with creating the ")
            (text/emphasis "HTML")
            (text/normal " page for the pie chart. This page contains a ")
            (text/emphasis "DIV")
            (text/normal " element that is to be transformed by the client side ")
            (text/emphasis "JavaScript")
            (text/normal " program into the graphical pie chart. The ")
            (text/emphasis "id")
            (text/normal " attribute of this element serves as the link between the ")
            (text/emphasis "HTML")
            (text/normal " page and the ")
            (text/emphasis "JavaScript")
            (text/normal " program.")))
        (book/paragraph ()
          (make-instance 'web-example/natural :content chart-page-div))
        (book/paragraph (:alignment :justified)
          (text/text ()
            (text/normal "The chart page header starts with a ")
            (text/emphasis "CSS")
            (text/normal " stylesheet that is to be provided by the web server at a local ")
            (text/emphasis "URL")
            (text/normal ". The client side ")
            (text/emphasis "JavaScript")
            (text/normal " program needs the ")
            (text/emphasis "Google Java Script API")
            (text/normal " and the ")
            (text/emphasis "jQuery")
            (text/normal " libraries, so they are also included first in the page header. Finally, the header includes the client side ")
            (text/emphasis "JavaScript")
            (text/normal " program that is also to be provided by the web server at a local ")
            (text/emphasis "URL")
            (text/normal ".")))
        (book/paragraph ()
          (make-instance 'web-example/natural :content chart-page)))
      (book/chapter (:title "A Simple Stylesheet")
        (book/paragraph (:alignment :justified)
          (text/make-process-text "This chapter describes a simple styleheet for the pie chart web page in the previous chapter. The stylesheet is kept very simple to help understaning how the web server actually produces it."))
        (book/paragraph ()
          (make-instance 'web-example/natural :content chart-css))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "The following Common Lisp program shows the very same stylesheet using a different editor projection. In fact, this is a similar projection that is used to feed the stylesheet to the Common Lisp compiler. You might notice that there's a correspondence between the syntactical elements of the stylesheet and the Common Lisp function calls to write-string. This is not just a coincidence but the result of applying an extra projection on the output of the default CSS to styled text projection. Interestingly, the resulting Common Lisp program is still editable in certain ways that allows the projection to transform the changes back to the original CSS domain."))
        (book/paragraph ()
          (make-instance 'web-example/emitting :content chart-css))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "Of course the previous Common Lisp program isn't as efficient as it could be because it writes the strings one by one. The following Common Lisp program shows the result of applying another projection that recursively folds the function calls to write-string with constant strings. It's like a poor man's partial evaluator. Similarly and even more interestingly to the previous projection, the result is still editable to some extent."))
        (book/paragraph ()
          (make-instance 'web-example/folded :content chart-css)))
      (book/chapter (:title "The Data")
        (book/paragraph (:alignment :justified)
          (text/make-process-text "The next step is to create the chart data. The chart data is a very simple table that is expressed in JSON format. The table has two columns and a few rows. The following JSON array of JSON objects describe the columns of the table. Each JSON object specifies the label and the type of a single column as object fields."))
        (book/paragraph ()
          (make-instance 'web-example/natural :content chart-data-header))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "A cells of a row in the table is also expressed as a JSON array of JSON objects. The cells follow each other according to the order of the columns. Each JSON object specifies the value for a single cell as an object field."))
        (book/paragraph ()
          (make-instance 'web-example/natural :content chart-data-first-row))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "Surprisingly the rows of the table is also expressed as a JSON array of JSON objects. Each JSON object specifes the cells of a single row as an object field."))
        (book/paragraph ()
          (make-instance 'web-example/natural :content chart-data-data))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "Finally, the whole table is expressed as a JSON object. The JSON object specifies the columns and the rows of the table as fields. This final form of the chart data shares the previous definitions (columns and rows), so editing any of them is automatically reflected in the others."))
        (book/paragraph ()
          (make-instance 'web-example/natural :content chart-data)))
      (book/chapter (:title "Client Side Program")
        (book/paragraph (:alignment :justified)
          (text/make-process-text "The client side program is written in JavaScript. It runs inside the web browser when the chart page is loaded. It uses the Google Charts JavaScript API and jQuery. When the program runs it sends an HTTP request for the chart data, it parses the received JSON document, and finally it creates the pie chart in place of a DIV element."))
        (book/paragraph ()
          (make-instance 'web-example/natural :content chart-script-draw))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "The following is the complete program that is a bit more complicated. It sets up the necessary component within the Google library and hooks a callback function that is run after the page is loaded."))
        (book/paragraph ()
          (make-instance 'web-example/natural :content chart-script)))
      (book/chapter (:title "Error Page")
        (book/paragraph (:alignment :justified)
          (text/make-process-text "In this chapter we create an error page that the web server sends for an unknown HTTP request. To make the error page more user friendly, it includes a small Common Lisp program that inserts the path of the original HTTP request into the error message."))
        (book/paragraph ()
          (make-instance 'web-example/natural :content error-page-message))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "The following Common Lisp program shows how the error message is written to the network stream. It actually uses the same projection that is used to show how the stylehseet is produced by the web server."))
        (book/paragraph ()
          (make-instance 'web-example/emitting :content error-page-message))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "The write-string folding projection that is used for the stylesheet works well for the error message too. The resulting Common Lisp program is concise, efficient and can be direcly processed by the Common Lisp compiler."))
        (book/paragraph ()
          (make-instance 'web-example/folded :content error-page-message))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "The following is the complete web page including the required head and body elements. It reuses the previous definition of the error message, so editing is reflected in both of them."))
        (book/paragraph ()
          (make-instance 'web-example/natural :content error-page)))
      (book/chapter (:title "Putting it All Together in the Server Program")
        (book/paragraph (:alignment :justified)
          (text/make-process-text "In this chapter we create the Common Lisp server program by putting all the pieces together. At first, the server program is displayed briefly to help understanding the URL dispatch logic. This notation doesn't show the individual HTTP responses at all."))
        (book/paragraph ()
          (make-instance 'web-example/brief :content process-http-function))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "The following is the complete server side program displayed in the natural text notation for all used problem domains. The server side program includes the dispatch table, the chart page, the stylesheet, the chart data, the client side program, and the error page as defined earlier."))
        (book/paragraph ()
          (make-instance 'web-example/natural :content process-http-function))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "The server program can be compiled with the Common Lisp compiler using another projection. The result of this projection is similar to the ones presented earlier."))
        (book/paragraph ()
          (make-instance 'web-example/folded :content process-http-function)))
      (book/chapter (:title "Running the Web Page")
        (book/paragraph (:alignment :justified)
          (text/make-process-text "In this chapter we actually test the implemented web page. Luckily, ProjecturEd, the editor and this example are both written in Common Lisp. Also in Common Lisp, the compiler is present in the runing program, so it's possible to actually compile and run the example within the editor."))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "The first thing we define is an HTTP handler function that deals with the incoming and outgoing data structures of the web server. This is very specific to the web server library that we are using to run the example."))
        (book/paragraph ()
          (make-instance 'web-example/natural :content server-handler))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "Now we can create the web server data structure, and store it in a global variable. Running the following program doesn't start the web server yet, it just defines the address and the port it listens to, and the way it handles HTTP requests."))
        (book/paragraph ()
          (make-instance 'web-example/natural :content server-variable))
        (book/paragraph (:alignment :justified)
          (text/text ()
            (text/normal "Finally, we can start the web server using the following program. Once the web server is up and running, we can open the web browser, and test the implemented web page at the specified ")
            (text/emphasis "http://localhost:8080/page")
            (text/normal " location.")))
        (book/paragraph ()
          (make-instance 'web-example/natural :content (make-common-lisp/application (make-lisp-form/symbol "STARTUP-SERVER" "HU.DWIM.WEB-SERVER") (list (make-common-lisp/variable-reference server-variable)))))
        (book/paragraph (:alignment :justified)
          (text/make-process-text "We can also shut down the web server using the following program. Once the web server is shut down, we can verify that the web page is inaccessible by reloading the page in the web browser."))
        (book/paragraph ()
          (make-instance 'web-example/natural :content (make-common-lisp/application (make-lisp-form/symbol "SHUTDOWN-SERVER" "HU.DWIM.WEB-SERVER") (list (make-common-lisp/variable-reference server-variable)))))))))

(def function make-initial-document ()
  (workbench/workbench ()
    (workbench/navigator ()
      (make-file-system/pathname (resource-pathname "example/")))
    (workbench/editor ()
      #+nil
      (workbench/document (:title "Web" :filename (resource-pathname "example/web-example.pred"))
        (make-initial-document/web-example))
      #+nil
      (workbench/document (:title "Welcome" :filename (resource-pathname "example/welcome-page.pred"))
        (make-initial-document/welcome-page))
      #+nil
      (workbench/document (:title "XML" :filename (resource-pathname "example/xml-example.pred"))
        (make-initial-document/xml-example))
      #+nil
      (workbench/document (:title "JSON" :filename (resource-pathname "example/json-example.pred"))
        (make-initial-document/json-example))
      #+nil
      (workbench/document (:title "Common Lisp" :filename (resource-pathname "example/json-example.pred"))
        (make-initial-document/common-lisp-example))
      #+nil
      (workbench/document (:title "Web" :filename (resource-pathname "example/web-example.pred"))
        (make-initial-document/web-example))
      (workbench/document (:title "Empty" :filename (resource-pathname "example/empty-example.pred"))
        (make-initial-document/empty-example)))))
