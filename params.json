{"name":"ProjecturEd","tagline":"ProjecturEd is a generic purpose projectional editor.","body":"![My image](http://s9.postimage.org/mxnmsv4en/projectured.png)\r\n\r\nDescription\r\n-----------\r\n\r\nProjecturEd is a generic purpose projectional editor written in Common Lisp. Unfortunately due to lack of time it's under quite *slow* construction. Drop me a mail at projectured@gmail.com if you would like to participate.\r\n\r\nInternals\r\n---------\r\n\r\nIf you are interested in the projectional editor internals, then currently the best thing to do is to look at the code. Surprisingly the code is not that long, it's less than 10,000 lines as of february, 2013.\r\nYou can also read the files in the documentation folder of the repository, although it's far from being well structured. There are also a number of helpful [pages in the wiki](https://github.com/projectured/projectured/wiki) that might help getting some parts of the idea.\r\n\r\nScreenshots\r\n-----------\r\n\r\nIf you just want to take a look at the projectional editor in action, then there's a [separate page in the wiki](https://github.com/projectured/projectured/wiki/Screenshots) with a couple of screenshots showing various domains and projections.\r\n\r\nPerformance\r\n-----------\r\n\r\nUnfortunately performance is just not that great right now, although there are a few low hanging fruits in the code. The design also helps in that the printer and the reader are purely functional algorithms, so it wouldn't be that hard to utilize multiple cores for them. Finally both the printer and the reader are written using a constraint based change propagation library that allows lazy and incremental computation of results. One day it might even be fast enough to be useful...\r\n\r\nLimitations\r\n-----------\r\n\r\nThe editor is far from being usable at the moment, so don't expect too much right now. You have been warned!\r\n\r\nSupported Backends\r\n------------------\r\n\r\n - The SDL backend prints to a native window of the operating system, and it reads keyboard and mouse events.\r\n\r\n - The SLIME backend prints to a SLIME REPL in Emacs using SWANK, and it doesn't support reading events at all.\r\n\r\n - The WEB backend prints to the web browser using Ajax and JavaScript, and it reads keyboard and mouse events (not properly).\r\n\r\nSupported Domains\r\n-----------------\r\n\r\nThere are a number of supported domains:\r\n - graphics\r\n - string\r\n - styled string\r\n - list\r\n - table\r\n - tree\r\n - XML\r\n - JSON\r\n - Java code\r\n - S-expression\r\n - Common Lisp code\r\n - book\r\n - widget\r\n - etc.\r\n\r\nSupported Projections\r\n---------------------\r\n\r\nThere are a number of supported primitive projections:\r\n - string to styled string\r\n - styled string to graphics\r\n - line numbering\r\n - word wrapping\r\n - XML to tree\r\n - JSON to tree\r\n - Java to tree\r\n - Common Lisp to tree\r\n - book to tree\r\n - tree to string\r\n - list to string\r\n - table to string\r\n - widget to graphics\r\n - etc.\r\n\r\nThere are a number of supported generic projections:\r\n - remove\r\n - sort\r\n - focus\r\n - copy\r\n - etc.\r\n\r\nThere are a number of supported higher order projections:\r\n- sequential\r\n- parallel\r\n- recursive\r\n- nested\r\n- type dispatch\r\n- predicate dispatch\r\n- etc.\r\n\r\nTesting\r\n-------\r\n\r\nYou should load the SDL backend via (LOAD-SYSTEM :PROJECTURED.SDL.TEST) and run the examples such as (TEST/EDITOR/JSON) from the :PRJECTURED.TEST package.\r\nYou should immediately see a window popping up and showing some content, in this case it should be colorized text. You can move around with the cursor and edit some parts of the JSON document.\r\nTry clicking with the right mouse button to see what the editor knows about that location. Left clicking should put the cursor at the mouse location.\r\n\r\nSome supported navigation gestures:\r\n- cursor keys\r\n- home and end keys (also control + home, control + end) \r\n- pageup and pagedown\r\n\r\nSome editing gestures:\r\n- insert alphanumeric characters\r\n\r\nSome supported projection changing gestures:\r\n- control + c (turns off coloring)\r\n- control + i (turns off indentation)\r\n- control + d (turns off delimiters)\r\n- control + s (turns off separators)\r\n\r\nHappy hacking.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}